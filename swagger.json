{
  "openapi": "3.0.1",
  "info": {
    "title": "Civitai Orchestration API",
    "version": "v2",
    "x-logo": {
      "url": "https://wiki.civitai.com/images/1/17/Logo_%28Light%29.png",
      "backgroundColor": "#FFFFFF"
    }
  },
  "paths": {
    "/v2/consumer/blobs/{blobId}": {
      "get": {
        "tags": [
          "Blobs"
        ],
        "operationId": "GetBlob",
        "parameters": [
          {
            "name": "blobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/providers/configurations": {
      "post": {
        "tags": [
          "Configurations"
        ],
        "operationId": "CreateConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationOptions"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationOptions"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationOptions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateConfigurationResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Configurations"
        ],
        "operationId": "QueryConfigurations",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/providers/configurations/{configurationId}/options": {
      "get": {
        "tags": [
          "Configurations"
        ],
        "operationId": "GetConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationOptions"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/providers/configurations/{configurationId}": {
      "delete": {
        "tags": [
          "Configurations"
        ],
        "operationId": "DeleteConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/models/{air}": {
      "get": {
        "tags": [
          "Models"
        ],
        "operationId": "GetModel",
        "parameters": [
          {
            "name": "air",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\.]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Models"
        ],
        "operationId": "InvalidateModel",
        "parameters": [
          {
            "name": "air",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\.]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v2/providers/workers/{workerId}/jobs": {
      "get": {
        "tags": [
          "WorkerJobs"
        ],
        "operationId": "GetJobs",
        "parameters": [
          {
            "name": "workerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wait",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "claim",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/providers/workers": {
      "post": {
        "tags": [
          "Workers"
        ],
        "operationId": "CreateWorker",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkerRegistration"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkerRegistration"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkerRegistration"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWorkerResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Workers"
        ],
        "operationId": "QueryWorkers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkerDetails"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/providers/workers/{workerId}": {
      "get": {
        "tags": [
          "Workers"
        ],
        "operationId": "GetWorker",
        "parameters": [
          {
            "name": "workerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkerDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Workers"
        ],
        "operationId": "DeleteWorker",
        "parameters": [
          {
            "name": "workerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/providers/workers/{workerId}/registration": {
      "get": {
        "tags": [
          "Workers"
        ],
        "operationId": "GetRegistration",
        "parameters": [
          {
            "name": "workerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkerRegistration"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Workers"
        ],
        "operationId": "UpdateWorkerRegistration",
        "parameters": [
          {
            "name": "workerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkerRegistration"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkerRegistration"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkerRegistration"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/providers/workers/{workerId}/registration/assets": {
      "patch": {
        "tags": [
          "Workers"
        ],
        "operationId": "PatchWorkerAssets",
        "parameters": [
          {
            "name": "workerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/WorkerModelStatus"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/WorkerModelStatus"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/WorkerModelStatus"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/consumer/workflows": {
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Submit a workflow for processing",
        "operationId": "SubmitWorkflow",
        "parameters": [
          {
            "name": "wait",
            "in": "query",
            "description": "Whether to wait for the job to complete before returning or to return immediately\r\nThe request may return a 202 if the clients waits for the workflow to complete and the workflow does not complete within the requested timeout. \r\nIn which case the client should use the token to query the status of the workflow.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "whatif",
            "in": "query",
            "description": "Whether to actually submit the workflow or return an estimate on what would happen upon submission",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowTemplate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowTemplate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowTemplate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "callbacks": {
          "WorkflowEvent": {
            "{$request.query.callbackUrl}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/WorkflowEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server implementation should return this HTTP status code if the data was received successfully"
                  },
                  "4XX": {
                    "description": "If your server returns an HTTP status code indicating it does not understand the format of the payload the delivery will be treated as a failure. No retries are attempted."
                  },
                  "5XX": {
                    "description": "If your server returns an HTTP status code indicating a server-side error the delivery will be treated as a failure. retries are attempted."
                  }
                }
              }
            }
          },
          "WorkflowStepEvent": {
            "{$request.query.callbackUrl}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/WorkflowStepEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server implementation should return this HTTP status code if the data was received successfully"
                  },
                  "4XX": {
                    "description": "If your server returns an HTTP status code indicating it does not understand the format of the payload the delivery will be treated as a failure. No retries are attempted."
                  },
                  "5XX": {
                    "description": "If your server returns an HTTP status code indicating a server-side error the delivery will be treated as a failure. retries are attempted."
                  }
                }
              }
            }
          },
          "WorkflowStepJobEvent": {
            "{$request.query.callbackUrl}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/WorkflowStepJobEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server implementation should return this HTTP status code if the data was received successfully"
                  },
                  "4XX": {
                    "description": "If your server returns an HTTP status code indicating it does not understand the format of the payload the delivery will be treated as a failure. No retries are attempted."
                  },
                  "5XX": {
                    "description": "If your server returns an HTTP status code indicating a server-side error the delivery will be treated as a failure. retries are attempted."
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Query for workflows made by the user",
        "operationId": "QueryWorkflows",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "An optional cursor to continue querying workflows from a previous query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "How many workflows to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "jobType",
            "in": "query",
            "description": "The type of job to filter on",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CursedArrayOfTelemetryCursorAndWorkflow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/consumer/workflows/{workflowId}": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get the status of a workflow",
        "operationId": "GetWorkflow",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The id of the workflow to get status for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wait",
            "in": "query",
            "description": "Whether to wait for the job to complete before returning or to return immediately\r\nThe workflow may return a 202 if the clients waits for the job to complete and the job does not complete within the requested timeout. \r\nIn which case the client should use the token to query the status of the job.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Workflows"
        ],
        "summary": "Updates a request. This can currently be used to cancel a request",
        "operationId": "UpdateWorkflow",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The id of the request to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Workflows"
        ],
        "summary": "Deletes a request and all its jobs",
        "operationId": "DeleteWorkflow",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The id of the request to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConfigurationOptions": {
        "required": [
          "selector",
          "spec"
        ],
        "type": "object",
        "properties": {
          "priority": {
            "type": "integer",
            "description": "Get or set the priority of this configuration if multiple configurations apply to the same worker",
            "format": "int64"
          },
          "selector": {
            "$ref": "#/components/schemas/Expression"
          },
          "spec": {
            "description": "Get or set the specification associated with this configuration",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfigurationStatus": {
        "type": "object",
        "properties": {
          "configurationId": {
            "type": "string"
          },
          "assigned": {
            "type": "integer",
            "format": "int32"
          },
          "targeted": {
            "type": "integer",
            "format": "int32"
          },
          "applied": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateConfigurationResult": {
        "type": "object",
        "properties": {
          "configurationId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateWorkerResult": {
        "type": "object",
        "properties": {
          "workerId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CursedArrayOfTelemetryCursorAndWorkflow": {
        "type": "object",
        "properties": {
          "next": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Workflow"
            }
          }
        },
        "additionalProperties": false
      },
      "DynamicAssignment": {
        "type": "object",
        "properties": {
          "fromPath": {
            "type": "string"
          },
          "toPath": {
            "type": "string"
          },
          "defaultValue": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EchoInput": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EchoOutput": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EchoStep": {
        "required": [
          "$type",
          "input"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStep"
          }
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Get or set the name of this step so that it can be referenced by other steps",
            "nullable": true
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "timeout": {
            "type": "string",
            "description": "The max amount of time to wait for a job generated by this node to complete before timing out",
            "nullable": true,
            "example": "00:00:00"
          },
          "retries": {
            "type": "integer",
            "description": "The max number of retries before we give up",
            "format": "int32",
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowStepJob"
            },
            "description": "Get the jobs generated by this step"
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          },
          "startedAt": {
            "type": "string",
            "description": "Get the moment in time when the step started or null if the step as not yet started",
            "format": "date-time",
            "nullable": true
          },
          "completedAt": {
            "type": "string",
            "description": "Get the moment in time when the step completed or null if the step has not yet completed",
            "format": "date-time",
            "nullable": true
          },
          "input": {
            "$ref": "#/components/schemas/EchoInput"
          },
          "output": {
            "$ref": "#/components/schemas/EchoOutput"
          },
          "$type": {
            "enum": [
              "echo"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EchoStepTemplate": {
        "required": [
          "$type",
          "input"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStepTemplate"
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "echo"
            ],
            "type": "string"
          },
          "input": {
            "$ref": "#/components/schemas/EchoInput"
          }
        },
        "additionalProperties": false
      },
      "EcosystemElement": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/EcosystemElement"
        }
      },
      "EpochResult": {
        "required": [
          "blobName",
          "blobSize"
        ],
        "type": "object",
        "properties": {
          "blobName": {
            "minLength": 1,
            "type": "string",
            "description": "Get the name of the generated epoch assets"
          },
          "blobSize": {
            "type": "integer",
            "description": "Get the total size in bytes of the asset",
            "format": "int64"
          },
          "sampleImages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Get a list of the names of the blobs that represent sample images"
          }
        },
        "additionalProperties": false
      },
      "Expression": {
        "type": "object",
        "additionalProperties": false
      },
      "Image": {
        "required": [
          "available",
          "id",
          "jobId",
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string",
            "description": "Gets the id of the blob that contains this image."
          },
          "available": {
            "type": "boolean",
            "description": "Gets a value indicating whether the image is available."
          },
          "url": {
            "type": "string",
            "description": "Gets the URL of the image.",
            "format": "uri"
          },
          "jobId": {
            "minLength": 1,
            "type": "string",
            "description": "Get the id of the job that is associated with this image"
          }
        },
        "additionalProperties": false,
        "description": "Represents an image that is the result of a TextToImage workflow step."
      },
      "ImageJobControlNet": {
        "type": "object",
        "properties": {
          "preprocessor": {
            "$ref": "#/components/schemas/ImageTransformer"
          },
          "weight": {
            "type": "number",
            "format": "double"
          },
          "startStep": {
            "type": "number",
            "format": "double"
          },
          "endStep": {
            "type": "number",
            "format": "double"
          },
          "blobKey": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImageJobNetworkParams": {
        "type": "object",
        "properties": {
          "strength": {
            "type": "number",
            "description": "In case of Lora and LoCon, set the strength of the network",
            "format": "double",
            "nullable": true
          },
          "triggerWord": {
            "type": "string",
            "description": "In case of a TextualInversion, set the trigger word of the network",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "A legacy type set by the consumer",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImageJobParams": {
        "required": [
          "height",
          "width"
        ],
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "nullable": true
          },
          "negativePrompt": {
            "type": "string",
            "nullable": true
          },
          "scheduler": {
            "$ref": "#/components/schemas/Scheduler"
          },
          "steps": {
            "maximum": 150,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "cfgScale": {
            "maximum": 30,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "width": {
            "maximum": 2048,
            "minimum": 64,
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "maximum": 2048,
            "minimum": 64,
            "type": "integer",
            "format": "int32"
          },
          "seed": {
            "maximum": 4294967295,
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "clipSkip": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ImageResourceTrainingInput": {
        "required": [
          "model",
          "trainingData"
        ],
        "type": "object",
        "properties": {
          "model": {
            "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\.]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
            "type": "string",
            "description": "The primary model to train upon"
          },
          "trainingData": {
            "type": "string",
            "description": "A url referring data that needs to be trained upon",
            "format": "uri"
          },
          "unetLR": {
            "type": "number",
            "format": "double"
          },
          "textEncoderLR": {
            "type": "number",
            "format": "double"
          },
          "optimizerType": {
            "type": "string"
          },
          "networkDim": {
            "type": "integer",
            "format": "int32"
          },
          "networkAlpha": {
            "type": "integer",
            "format": "int32"
          },
          "lrScheduler": {
            "type": "string"
          },
          "maxTrainEpochs": {
            "type": "integer",
            "format": "int32"
          },
          "numRepeats": {
            "type": "integer",
            "format": "int32"
          },
          "resolution": {
            "type": "integer",
            "format": "int32"
          },
          "loraType": {
            "type": "string"
          },
          "enableBucket": {
            "type": "boolean"
          },
          "keepTokens": {
            "type": "integer",
            "format": "int32"
          },
          "lrSchedulerNumCycles": {
            "type": "integer",
            "format": "int32"
          },
          "trainBatchSize": {
            "type": "integer",
            "format": "int32"
          },
          "minSnrGamma": {
            "type": "integer",
            "format": "int32"
          },
          "optimizerArgs": {
            "type": "string"
          },
          "shuffleCaption": {
            "type": "boolean"
          },
          "loraName": {
            "type": "string"
          },
          "noiseOffset": {
            "type": "number",
            "format": "double"
          },
          "samplePrompts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "ImageResourceTrainingJob": {
        "required": [
          "$type",
          "params",
          "trainingData"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Job"
          }
        ],
        "properties": {
          "model": {
            "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\.]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
            "type": "string"
          },
          "trainingData": {
            "type": "string",
            "description": "A url referring data that needs to be trained upon",
            "format": "uri"
          },
          "params": {
            "type": "object",
            "additionalProperties": {},
            "description": "A untyped set of parameters that are associated with this job"
          },
          "cost": {
            "type": "number",
            "description": "Get cost associated with this job",
            "format": "double"
          },
          "customCost": {
            "type": "number",
            "description": "Get or set a custom cost value for this job",
            "format": "double"
          },
          "output": {
            "type": "string",
            "description": "An application provided output of the current status of this job",
            "nullable": true
          },
          "type": {
            "type": "string"
          },
          "claimDuration": {
            "type": "string",
            "description": "Rick: yeah i think for LoRA we need it to be 5-10 minutes.\r\nlora training has this lame effect where it can't send updates while it is uploading... so we need to give it extra buffer",
            "example": "00:00:00"
          },
          "$type": {
            "enum": [
              "ImageResourceTrainingJob"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ImageResourceTrainingOutput": {
        "required": [
          "epochs"
        ],
        "type": "object",
        "properties": {
          "epochs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EpochResult"
            }
          },
          "storedAsAssets": {
            "type": "boolean",
            "description": "Get wether the blobs are actually stored as assets\r\nAssets are deprecated and require a different retrieval mechanism",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImageResourceTrainingStep": {
        "required": [
          "$type",
          "input"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStep"
          }
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Get or set the name of this step so that it can be referenced by other steps",
            "nullable": true
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "timeout": {
            "type": "string",
            "description": "The max amount of time to wait for a job generated by this node to complete before timing out",
            "nullable": true,
            "example": "00:00:00"
          },
          "retries": {
            "type": "integer",
            "description": "The max number of retries before we give up",
            "format": "int32",
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowStepJob"
            },
            "description": "Get the jobs generated by this step"
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          },
          "startedAt": {
            "type": "string",
            "description": "Get the moment in time when the step started or null if the step as not yet started",
            "format": "date-time",
            "nullable": true
          },
          "completedAt": {
            "type": "string",
            "description": "Get the moment in time when the step completed or null if the step has not yet completed",
            "format": "date-time",
            "nullable": true
          },
          "input": {
            "$ref": "#/components/schemas/ImageResourceTrainingInput"
          },
          "output": {
            "$ref": "#/components/schemas/ImageResourceTrainingOutput"
          },
          "$type": {
            "enum": [
              "imageResourceTraining"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ImageResourceTrainingStepTemplate": {
        "required": [
          "$type",
          "input"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStepTemplate"
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "imageResourceTraining"
            ],
            "type": "string"
          },
          "input": {
            "$ref": "#/components/schemas/ImageResourceTrainingInput"
          }
        },
        "additionalProperties": false
      },
      "ImageTransformer": {
        "enum": [
          "canny",
          "depthZoe",
          "softedgePidinet",
          "rembg"
        ],
        "type": "string"
      },
      "Job": {
        "required": [
          "$type"
        ],
        "type": "object",
        "properties": {
          "$type": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "A unique id for this job"
          },
          "createdAt": {
            "type": "string",
            "description": "The date when this job got created",
            "format": "date-time"
          },
          "expireAt": {
            "type": "string",
            "description": "The date for when this job was set to expire",
            "format": "date-time",
            "nullable": true
          },
          "webhook": {
            "type": "string",
            "description": "A webhook to be invoked when the job receives a status update",
            "format": "uri",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {},
            "description": "A set of user defined properties that can be used to index and partition this job"
          },
          "type": {
            "type": "string",
            "description": "The type of this job as a string"
          },
          "cost": {
            "type": "number",
            "description": "Get a cost estimate for this job",
            "format": "double"
          },
          "maxRetryAttempt": {
            "type": "integer",
            "description": "The max number of retries before we give up",
            "format": "int32"
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DynamicAssignment"
              },
              "nullable": true
            },
            "description": "Get or set a list of dependencies that this job has"
          },
          "issuedBy": {
            "type": "string",
            "description": "Get or set the name of the consumer that issued this job",
            "nullable": true
          },
          "version": {
            "type": "integer",
            "description": "Get or set the version of this job, this is used to track changes to the job schema",
            "format": "int32"
          },
          "claimDuration": {
            "type": "string",
            "description": "The total duration that the job can be claimed",
            "example": "00:00:00"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "$type",
          "mapping": {
            "ImageResourceTrainingJob": "#/components/schemas/ImageResourceTrainingJob",
            "LLMPromptAugmentationJob": "#/components/schemas/LLMPromptAugmentationJob",
            "SimilaritySearchJob": "#/components/schemas/SimilaritySearchJob",
            "TextToImageJob": "#/components/schemas/TextToImageJob",
            "TextToImageJobV2": "#/components/schemas/TextToImageJobV2"
          }
        }
      },
      "JobSupport": {
        "enum": [
          "unsupported",
          "unavailable",
          "available"
        ],
        "type": "string"
      },
      "LLMPromptAugmentationCapabilities": {
        "type": "object",
        "additionalProperties": false
      },
      "LLMPromptAugmentationJob": {
        "required": [
          "$type",
          "model"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Job"
          }
        ],
        "properties": {
          "model": {
            "minLength": 1,
            "type": "string"
          },
          "basePrompt": {
            "type": "string",
            "nullable": true
          },
          "prompts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "temp": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "type": "string"
          },
          "$type": {
            "enum": [
              "LLMPromptAugmentationJob"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ModelInfo": {
        "required": [
          "air",
          "downloadUrls",
          "hashes",
          "size"
        ],
        "type": "object",
        "properties": {
          "air": {
            "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\.]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "hashes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "downloadUrls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "modelName": {
            "type": "string",
            "nullable": true
          },
          "versionName": {
            "type": "string",
            "nullable": true
          },
          "invalidateAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Priority": {
        "enum": [
          "high",
          "normal",
          "low"
        ],
        "type": "string"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "ProcessingStatistics": {
        "type": "object",
        "properties": {
          "totalJobsRequested": {
            "type": "integer",
            "format": "int64"
          },
          "totalCostRequested": {
            "type": "number",
            "format": "double"
          },
          "totalJobsSucceeded": {
            "type": "integer",
            "format": "int64"
          },
          "totalCostSucceeded": {
            "type": "number",
            "format": "double"
          },
          "totalJobsRejected": {
            "type": "integer",
            "format": "int64"
          },
          "totalCostRejected": {
            "type": "number",
            "format": "double"
          },
          "totalJobsLateRejected": {
            "type": "integer",
            "format": "int64"
          },
          "totalCostLateRejected": {
            "type": "number",
            "format": "double"
          },
          "totalJobsExpired": {
            "type": "integer",
            "format": "int64"
          },
          "totalCostExpired": {
            "type": "number",
            "format": "double"
          },
          "totalJobsFailed": {
            "type": "integer",
            "format": "int64"
          },
          "totalCostFailed": {
            "type": "number",
            "format": "double"
          },
          "totalJobsCompleted": {
            "type": "integer",
            "format": "int64"
          },
          "totalCostCompleted": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "Scheduler": {
        "enum": [
          "eulerA",
          "euler",
          "lms",
          "heun",
          "dpm2",
          "dpm2A",
          "dpm2SA",
          "dpm2M",
          "dpmSDE",
          "dpmFast",
          "dpmAdaptive",
          "lmsKarras",
          "dpm2Karras",
          "dpm2AKarras",
          "dpm2SAKarras",
          "dpm2MKarras",
          "dpmsdeKarras",
          "ddim",
          "plms",
          "uniPC",
          "undefined",
          "lcm",
          "ddpm",
          "deis"
        ],
        "type": "string"
      },
      "SimilaritySearchJob": {
        "required": [
          "$type",
          "model",
          "nsfwFilter",
          "params",
          "prompt"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Job"
          }
        ],
        "properties": {
          "model": {
            "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\.]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
            "type": "string"
          },
          "nsfwFilter": {
            "minLength": 1,
            "type": "string"
          },
          "prompt": {
            "minLength": 1,
            "type": "string"
          },
          "params": {
            "type": "object",
            "additionalProperties": {}
          },
          "cost": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "type": "string"
          },
          "$type": {
            "enum": [
              "SimilaritySearchJob"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "webhook": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TextToImageInput": {
        "required": [
          "height",
          "model",
          "width"
        ],
        "type": "object",
        "properties": {
          "quantity": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "Get or sets the number of images to generate in a batch",
            "format": "int32"
          },
          "batchSize": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The size of each batch",
            "format": "int32"
          },
          "model": {
            "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\.]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
            "type": "string",
            "description": "The AIR of the checkpoint model to use for generation"
          },
          "additionalNetworks": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ImageJobNetworkParams"
            },
            "description": "Get or set a associative list of additional networks. Use the AIR of the network as the key."
          },
          "controlNets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageJobControlNet"
            },
            "description": "Get or set a associative list of additional networks."
          },
          "prompt": {
            "type": "string",
            "nullable": true
          },
          "negativePrompt": {
            "type": "string",
            "nullable": true
          },
          "scheduler": {
            "$ref": "#/components/schemas/Scheduler"
          },
          "steps": {
            "maximum": 150,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "cfgScale": {
            "maximum": 30,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "width": {
            "maximum": 2048,
            "minimum": 64,
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "maximum": 2048,
            "minimum": 64,
            "type": "integer",
            "format": "int32"
          },
          "seed": {
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          },
          "clipSkip": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TextToImageJob": {
        "required": [
          "$type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Job"
          }
        ],
        "properties": {
          "model": {
            "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\.]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
            "type": "string"
          },
          "params": {
            "$ref": "#/components/schemas/ImageJobParams"
          },
          "imageHash": {
            "type": "string"
          },
          "additionalNetworks": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ImageJobNetworkParams"
            },
            "description": "Get or set a associative list of additional networks. Each network is identified by a hash code"
          },
          "destinationUrl": {
            "type": "string",
            "description": "Get or set the URL where the image will be uploaded to",
            "format": "uri",
            "nullable": true
          },
          "storeAsBlob": {
            "type": "boolean",
            "description": "Wether to store the image as a blob or as a legacy image"
          },
          "controlNets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageJobControlNet"
            },
            "description": "Get or set a list of control nets that should be applied with this textToImage job"
          },
          "cost": {
            "type": "number",
            "format": "double"
          },
          "claimDuration": {
            "type": "string",
            "example": "00:00:00"
          },
          "type": {
            "type": "string"
          },
          "$type": {
            "enum": [
              "TextToImageJob"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TextToImageJobSlot": {
        "type": "object",
        "properties": {
          "imageHash": {
            "type": "string"
          },
          "destinationUrl": {
            "type": "string",
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "TextToImageJobV2": {
        "required": [
          "$type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Job"
          }
        ],
        "properties": {
          "model": {
            "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\.]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
            "type": "string"
          },
          "params": {
            "$ref": "#/components/schemas/ImageJobParams"
          },
          "slots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextToImageJobSlot"
            }
          },
          "additionalNetworks": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ImageJobNetworkParams"
            },
            "description": "Get or set a associative list of additional networks. Each network is identified by a hash code"
          },
          "controlNets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageJobControlNet"
            },
            "description": "Get or set a list of control nets that should be applied with this textToImage job"
          },
          "cost": {
            "type": "number",
            "format": "double"
          },
          "claimDuration": {
            "type": "string",
            "example": "00:00:00"
          },
          "type": {
            "type": "string"
          },
          "$type": {
            "enum": [
              "TextToImageJobV2"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TextToImageOutput": {
        "type": "object",
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          }
        },
        "additionalProperties": false,
        "description": "Represents the output of a TextToImage workflow step."
      },
      "TextToImageStep": {
        "required": [
          "$type",
          "input"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStep"
          }
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Get or set the name of this step so that it can be referenced by other steps",
            "nullable": true
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "timeout": {
            "type": "string",
            "description": "The max amount of time to wait for a job generated by this node to complete before timing out",
            "nullable": true,
            "example": "00:00:00"
          },
          "retries": {
            "type": "integer",
            "description": "The max number of retries before we give up",
            "format": "int32",
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowStepJob"
            },
            "description": "Get the jobs generated by this step"
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          },
          "startedAt": {
            "type": "string",
            "description": "Get the moment in time when the step started or null if the step as not yet started",
            "format": "date-time",
            "nullable": true
          },
          "completedAt": {
            "type": "string",
            "description": "Get the moment in time when the step completed or null if the step has not yet completed",
            "format": "date-time",
            "nullable": true
          },
          "input": {
            "$ref": "#/components/schemas/TextToImageInput"
          },
          "output": {
            "$ref": "#/components/schemas/TextToImageOutput"
          },
          "$type": {
            "enum": [
              "textToImage"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TextToImageStepTemplate": {
        "required": [
          "$type",
          "input"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStepTemplate"
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "textToImage"
            ],
            "type": "string"
          },
          "input": {
            "$ref": "#/components/schemas/TextToImageInput"
          }
        },
        "additionalProperties": false
      },
      "TransactionInfo": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateWorkflowRequest": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/UpdateWorkflowStatus"
          }
        },
        "additionalProperties": false
      },
      "UpdateWorkflowStatus": {
        "enum": [
          "canceled"
        ],
        "type": "string",
        "nullable": true
      },
      "WorkerCapabilities": {
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/WorkerImageCapabilities"
          },
          "media": {
            "$ref": "#/components/schemas/WorkerMediaCapabilities"
          },
          "modelManagement": {
            "$ref": "#/components/schemas/WorkerModelPreparationCapabilities"
          },
          "configurationManagement": {
            "$ref": "#/components/schemas/WorkerConfigurationCapabilities"
          },
          "similaritySearch": {
            "$ref": "#/components/schemas/WorkerSimilaritySearchCapabilities"
          },
          "llmPromptAugmentation": {
            "$ref": "#/components/schemas/LLMPromptAugmentationCapabilities"
          }
        },
        "additionalProperties": false
      },
      "WorkerConfigurationCapabilities": {
        "type": "object",
        "additionalProperties": false
      },
      "WorkerDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "activeJobs": {
            "type": "integer",
            "format": "int32"
          },
          "queueSize": {
            "type": "integer",
            "format": "int32"
          },
          "queueDepth": {
            "type": "number",
            "format": "double"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastRequestDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "statistics": {
            "$ref": "#/components/schemas/ProcessingStatistics"
          },
          "succeededThroughputRate": {
            "type": "number",
            "format": "double"
          },
          "failedThroughputRate": {
            "type": "number",
            "format": "double"
          },
          "idleRate": {
            "type": "number",
            "format": "double"
          },
          "lastSuccesfullyCompletedJobDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastJobUpdateDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "subscriptionSetDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "quarantineDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkerImageCapabilities": {
        "type": "object",
        "properties": {
          "textToImage": {
            "$ref": "#/components/schemas/WorkerImageTextToImageCapabilities"
          },
          "imageToImage": {
            "$ref": "#/components/schemas/WorkerImageImageToImageCapabilities"
          },
          "transform": {
            "$ref": "#/components/schemas/WorkerImageTransformCapabilities"
          },
          "resourceTraining": {
            "$ref": "#/components/schemas/WorkerImageResourceTrainingCapabilities"
          },
          "embedding": {
            "$ref": "#/components/schemas/WorkerImageEmbeddingCapabilities"
          }
        },
        "additionalProperties": false
      },
      "WorkerImageEmbeddingCapabilities": {
        "type": "object",
        "additionalProperties": false
      },
      "WorkerImageImageToImageCapabilities": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "description": "Max size supported (as square)",
            "format": "int32"
          },
          "schedulers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Scheduler"
            },
            "description": "Schedulers supported"
          },
          "controlNet": {
            "maximum": 10,
            "minimum": 0,
            "type": "integer",
            "description": "The number of controlnets that can be used in tandem",
            "format": "int32"
          },
          "inpainting": {
            "type": "boolean",
            "description": "Whether or not inpainting is supported"
          }
        },
        "additionalProperties": false
      },
      "WorkerImageResourceTrainingCapabilities": {
        "type": "object",
        "additionalProperties": false
      },
      "WorkerImageTextToImageCapabilities": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "description": "Max size supported (as square)",
            "format": "int32"
          },
          "schedulers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Scheduler"
            },
            "description": "Schedulers supported"
          },
          "controlNet": {
            "maximum": 10,
            "minimum": 0,
            "type": "integer",
            "description": "The number of controlnets that can be used in tandem",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "WorkerImageTransformCapabilities": {
        "type": "object",
        "properties": {
          "transformers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageTransformer"
            },
            "description": "Max size supported (as square)"
          }
        },
        "additionalProperties": false
      },
      "WorkerMediaCapabilities": {
        "type": "object",
        "properties": {
          "wdTagging": {
            "$ref": "#/components/schemas/WorkerMediaWDTaggingCapabilities"
          },
          "comfy": {
            "$ref": "#/components/schemas/WorkerMediaComfyCapabilities"
          },
          "tagging": {
            "$ref": "#/components/schemas/WorkerMediaTaggingCapabilities"
          },
          "movieRating": {
            "$ref": "#/components/schemas/WorkerMediaMovieRatingCapabilities"
          }
        },
        "additionalProperties": false
      },
      "WorkerMediaComfyCapabilities": {
        "type": "object",
        "additionalProperties": false
      },
      "WorkerMediaMovieRatingCapabilities": {
        "type": "object",
        "additionalProperties": false
      },
      "WorkerMediaTaggingCapabilities": {
        "type": "object",
        "additionalProperties": false
      },
      "WorkerMediaWDTaggingCapabilities": {
        "type": "object",
        "additionalProperties": false
      },
      "WorkerModelAvailability": {
        "enum": [
          "unknown",
          "unsupported",
          "unavailable",
          "available",
          "providerUnsupported"
        ],
        "type": "string"
      },
      "WorkerModelPreparationCapabilities": {
        "type": "object",
        "additionalProperties": false
      },
      "WorkerModelStatus": {
        "type": "object",
        "properties": {
          "availability": {
            "$ref": "#/components/schemas/WorkerModelAvailability"
          },
          "cost": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "WorkerRegistration": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "onDemandModelTypesAsArray": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "onDemandModelTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "capabilities": {
            "$ref": "#/components/schemas/WorkerCapabilities"
          },
          "subscription": {
            "$ref": "#/components/schemas/Subscription"
          },
          "type": {
            "$ref": "#/components/schemas/WorkerType"
          },
          "concurrentLimit": {
            "type": "integer",
            "description": "How many requests you can handle at once",
            "format": "int32"
          },
          "ecosystems": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EcosystemElement"
            },
            "description": "The ecosystems supported by this worker"
          },
          "models": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/WorkerModelStatus"
            },
            "description": "A list of assets that are currently unavailable by this worker\r\nThis is the counterpart of assets"
          },
          "cacheLevel": {
            "type": "string",
            "description": "The name of the closest cache level that this worker can interact with",
            "nullable": true
          },
          "maxColdSwapQueueSize": {
            "type": "integer",
            "description": "The max queue size before we stop accepting requests that require cold swapping",
            "format": "int32",
            "nullable": true
          },
          "maxPendingModelSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "consumeUnavailableJobs": {
            "type": "boolean",
            "description": "Wether the worker should consume jobs that are not yet available"
          },
          "nodeIdentifier": {
            "type": "string",
            "description": "An optional identified that uniquely identifies this worker",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkerSimilaritySearchCapabilities": {
        "type": "object",
        "additionalProperties": false
      },
      "WorkerType": {
        "enum": [
          "normal",
          "deferred"
        ],
        "type": "string"
      },
      "Workflow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionInfo"
            },
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          },
          "startedAt": {
            "type": "string",
            "description": "Get the moment in time when the workflow started or null if the workflow as not yet started",
            "format": "date-time",
            "nullable": true
          },
          "completedAt": {
            "type": "string",
            "description": "Get the moment in time when the workflow completed or null if the workflow has not yet completed",
            "format": "date-time",
            "nullable": true
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowStep"
            }
          },
          "callbacks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowCallback"
            }
          }
        },
        "additionalProperties": false
      },
      "WorkflowCallback": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "type": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "workflow:*",
                "workflow:unassigned",
                "workflow:processing",
                "workflow:succeeded",
                "workflow:failed",
                "workflow:expired",
                "workflow:canceled",
                "step:*",
                "step:unassigned",
                "step:processing",
                "step:succeeded",
                "step:failed",
                "step:expired",
                "step:canceled",
                "job:*",
                "job:unassigned",
                "job:processing",
                "job:succeeded",
                "job:failed",
                "job:expired",
                "job:canceled"
              ],
              "example": "workflow:succeeded"
            }
          }
        },
        "additionalProperties": false
      },
      "WorkflowEvent": {
        "type": "object",
        "properties": {
          "workflowId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          },
          "$type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkflowStatus": {
        "enum": [
          "unassigned",
          "preparing",
          "scheduled",
          "processing",
          "succeeded",
          "failed",
          "expired",
          "canceled"
        ],
        "type": "string"
      },
      "WorkflowStep": {
        "required": [
          "$type"
        ],
        "type": "object",
        "properties": {
          "$type": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Get or set the name of this step so that it can be referenced by other steps",
            "nullable": true
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "timeout": {
            "type": "string",
            "description": "The max amount of time to wait for a job generated by this node to complete before timing out",
            "nullable": true,
            "example": "00:00:00"
          },
          "retries": {
            "type": "integer",
            "description": "The max number of retries before we give up",
            "format": "int32",
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowStepJob"
            },
            "description": "Get the jobs generated by this step"
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          },
          "startedAt": {
            "type": "string",
            "description": "Get the moment in time when the step started or null if the step as not yet started",
            "format": "date-time",
            "nullable": true
          },
          "completedAt": {
            "type": "string",
            "description": "Get the moment in time when the step completed or null if the step has not yet completed",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "$type",
          "mapping": {
            "textToImage": "#/components/schemas/TextToImageStep",
            "imageResourceTraining": "#/components/schemas/ImageResourceTrainingStep",
            "echo": "#/components/schemas/EchoStep"
          }
        }
      },
      "WorkflowStepEvent": {
        "type": "object",
        "properties": {
          "workflowId": {
            "type": "string"
          },
          "stepName": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          },
          "$type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkflowStepJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "cost": {
            "type": "number",
            "format": "double"
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          },
          "startedAt": {
            "type": "string",
            "description": "Get the moment in time when the job started or null if the job has not yet started",
            "format": "date-time",
            "nullable": true
          },
          "completedAt": {
            "type": "string",
            "description": "Get the moment in time when the job completed or null if the job has not yet completed",
            "format": "date-time",
            "nullable": true
          },
          "queuePosition": {
            "$ref": "#/components/schemas/WorkflowStepJobQueuePosition"
          }
        },
        "additionalProperties": false
      },
      "WorkflowStepJobEvent": {
        "type": "object",
        "properties": {
          "workflowId": {
            "type": "string"
          },
          "stepName": {
            "type": "string"
          },
          "jobId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          },
          "$type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkflowStepJobQueuePosition": {
        "type": "object",
        "properties": {
          "support": {
            "$ref": "#/components/schemas/JobSupport"
          },
          "precedingJobs": {
            "type": "integer",
            "description": "Get the number of jobs preceding the current job",
            "format": "int32",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "description": "Get an estimation as to when this job will start",
            "format": "date-time",
            "nullable": true
          },
          "completeAt": {
            "type": "string",
            "description": "Get an estimation as to when this job will complete",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkflowStepTemplate": {
        "required": [
          "$type",
          "input"
        ],
        "type": "object",
        "properties": {
          "$type": {
            "minLength": 1,
            "type": "string",
            "description": "Get or set the type of this step"
          },
          "name": {
            "type": "string",
            "description": "Get or set the name of this step so that it can be referenced by other steps",
            "nullable": true
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "timeout": {
            "type": "string",
            "description": "The max amount of time to wait for a job generated by this node to complete before timing out",
            "nullable": true,
            "example": "00:00:00"
          },
          "retries": {
            "type": "integer",
            "description": "The max number of retries before we give up",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "$type",
          "mapping": {
            "textToImage": "TextToImageStepTemplate",
            "imageResourceTraining": "ImageResourceTrainingStepTemplate",
            "echo": "EchoStepTemplate"
          }
        }
      },
      "WorkflowTemplate": {
        "required": [
          "steps"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {},
            "description": "Properties are user defined metadata that can be used to store additional information about the workflow",
            "nullable": true
          },
          "steps": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowStepTemplate"
            },
            "description": "A list of steps that compose this workflow."
          },
          "callbacks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowCallback"
            },
            "description": "A list of callbacks that should get called during the lifecycle of the workflow"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "description": "Copy 'Bearer ' + valid Authorization token into field",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "ApiKey": []
    }
  ],
  "x-tagGroups": [
    {
      "name": "Models",
      "tags": [
        "Models"
      ]
    },
    {
      "name": "Consumer",
      "tags": [
        "Workflows"
      ]
    },
    {
      "name": "Provider",
      "tags": [
        "Providers",
        "Workers",
        "WorkerJobs",
        "Configurations"
      ]
    }
  ]
}