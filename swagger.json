{
  "openapi": "3.0.4",
  "info": {
    "title": "Civitai Orchestration Consumer API",
    "description": "The Civitai Orchestration API is a RESTful API that allows you to interact with the Civitai Orchestration system. The API is designed to be simple and easy to use, and is built on top of the OpenAPI specification.",
    "version": "v2",
    "x-logo": {
      "url": "https://wiki.civitai.com/images/1/17/Logo_%28Light%29.png",
      "backgroundColor": "#FFFFFF"
    }
  },
  "paths": {
    "/v2/consumer/blobs/{blobId}": {
      "get": {
        "tags": [
          "Blobs"
        ],
        "summary": "Get blob by ID. This will return the blob as a binary stream.",
        "operationId": "GetBlob",
        "parameters": [
          {
            "name": "blobId",
            "in": "path",
            "description": "The blob ID to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflowId",
            "in": "query",
            "description": "The id of the workflow to obtain",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nsfwLevel",
            "in": "query",
            "description": "A maximum nsfw level. If this is specified and the blob does not have a NSFW level specified or the NSFW level exceeds our max then we'll return an error",
            "schema": {
              "$ref": "#/components/schemas/NSFWLevel"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Blobs"
        ],
        "summary": "Handles HTTP HEAD requests for a specific blob, checking its existence and NSFW level.",
        "operationId": "HeadBlob",
        "parameters": [
          {
            "name": "blobId",
            "in": "path",
            "description": "Identifies the specific blob to check for existence and NSFW level.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/consumer/recipes/ageClassification": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Age classification",
        "description": "Detects minors in media content. Returns a boolean value indicating whether the content contains minors as well as details on where minors are detected.",
        "operationId": "InvokeAgeClassificationStepTemplate",
        "parameters": [
          {
            "name": "experimental",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "allowMatureContent",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgeClassificationInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AgeClassificationInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AgeClassificationInput"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgeClassificationOutput"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/consumer/recipes/comfy": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Comfy workflows",
        "description": "Runs a comfy workflow. Currently there are limited nodes available. Contact support for more information.",
        "operationId": "InvokeComfyStepTemplate",
        "parameters": [
          {
            "name": "experimental",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "allowMatureContent",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComfyInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ComfyInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ComfyInput"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComfyOutput"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/consumer/recipes/echo": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Echo",
        "description": "A workflow step that takes a message string and retuns it.\r\n/// This step is intended for testing purposes.",
        "operationId": "InvokeEchoStepTemplate",
        "parameters": [
          {
            "name": "experimental",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "allowMatureContent",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EchoInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EchoInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EchoInput"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EchoOutput"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/consumer/recipes/imageGen": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Image Generation",
        "description": "Generate images through text/image inputs using any of our supported engines",
        "operationId": "InvokeImageGenStepTemplate",
        "parameters": [
          {
            "name": "experimental",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "allowMatureContent",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageGenInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageGenInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ImageGenInput"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageGenOutput"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/consumer/recipes/imageResourceTraining": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "LORA Training",
        "description": "Train LORA's",
        "operationId": "InvokeImageResourceTrainingStepTemplate",
        "parameters": [
          {
            "name": "experimental",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "allowMatureContent",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageResourceTrainingInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageResourceTrainingInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ImageResourceTrainingInput"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageResourceTrainingOutput"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/consumer/recipes/imageUpload": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Image upload",
        "description": "Uploads an image to be used in a workflow",
        "operationId": "InvokeImageUploadStepTemplate",
        "parameters": [
          {
            "name": "experimental",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "allowMatureContent",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageUploadOutput"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/consumer/recipes/textToImage": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "TextToImage",
        "description": "Generate images using text as input",
        "operationId": "InvokeTextToImageStepTemplate",
        "parameters": [
          {
            "name": "experimental",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "allowMatureContent",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextToImageInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TextToImageInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TextToImageInput"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextToImageOutput"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/consumer/recipes/videoEnhancement": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Upscale videos and/or interpolate frames",
        "operationId": "InvokeVideoEnhancementStepTemplate",
        "parameters": [
          {
            "name": "experimental",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "allowMatureContent",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoEnhancementInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoEnhancementInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VideoEnhancementInput"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoEnhancementOutput"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/consumer/recipes/videoGen": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Video generation",
        "description": "Generate videos through text/image inputs using any of our supported engines",
        "operationId": "InvokeVideoGenStepTemplate",
        "parameters": [
          {
            "name": "experimental",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "allowMatureContent",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoGenInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoGenInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VideoGenInput"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoGenOutput"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/resources/{air}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get an existing resource.",
        "operationId": "GetResource",
        "parameters": [
          {
            "name": "air",
            "in": "path",
            "description": "A unique ID for the resource being requested. See https://developer.civitai.com/docs/getting-started/ai-resource-identifier for more info on AIRs.",
            "required": true,
            "schema": {
              "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\/.=,]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Resources"
        ],
        "summary": "Invalidates the cache of a specific resource.",
        "operationId": "InvalidateResource",
        "parameters": [
          {
            "name": "air",
            "in": "path",
            "description": "A unique ID for the resource being requested. See https://developer.civitai.com/docs/getting-started/ai-resource-identifier for more info on AIRs.",
            "required": true,
            "schema": {
              "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\/.=,]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "One or more userIds to invalidate early access for",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "etag",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/consumer/workflows": {
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Submit workflow",
        "operationId": "SubmitWorkflow",
        "parameters": [
          {
            "name": "wait",
            "in": "query",
            "description": "Whether to wait for the workflow to complete before returning or to return immediately\r\nThe request may return a 202 if the clients waits for the workflow to complete and the workflow does not complete within the requested timeout. \r\nIn which case the client should use the token to query the status of the workflow.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "whatif",
            "in": "query",
            "description": "Whether to actually submit the workflow or return an estimate on what would happen upon submission",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "hideMatureContent",
            "in": "query",
            "description": "When set to true, any blob that has mature won't be available and won't have a URL",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowTemplate"
              },
              "examples": {
                "TextToImage": {
                  "value": {
                    "metadata": {
                      "key1": "value1",
                      "key2": 2
                    },
                    "steps": [
                      {
                        "$type": "textToImage",
                        "input": {
                          "quantity": 2,
                          "batchSize": 4,
                          "model": "urn:air:sdxl:model:civitai:101055@128078",
                          "additionalNetworks": {
                            "urn:air:sd1:embedding:civitai:7808@9208": {
                              "triggerWord": "easynegative"
                            }
                          },
                          "controlNets": [],
                          "prompt": "A curious cat",
                          "negativePrompt": "nsfw",
                          "scheduler": "eulerA",
                          "steps": 30,
                          "cfgScale": 7.5,
                          "width": 512,
                          "height": 512,
                          "seed": 1790693947,
                          "clipSkip": 2
                        },
                        "priority": "high",
                        "timeout": "00:05:00",
                        "retries": 5
                      }
                    ],
                    "callbacks": [
                      {
                        "url": "https://example.com/callback",
                        "type": [
                          "workflow:succeeded",
                          "workflow:failed"
                        ]
                      }
                    ],
                    "upgradeMode": "manual"
                  }
                },
                "LORA training": {
                  "value": {
                    "metadata": {
                      "key1": "value1",
                      "key2": 2
                    },
                    "steps": [
                      {
                        "$type": "imageResourceTraining",
                        "input": {
                          "maxTrainEpochs": 5,
                          "numRepeats": 8,
                          "resolution": 512,
                          "enableBucket": true,
                          "shuffleCaption": false,
                          "keepTokens": 0,
                          "clipSkip": 1,
                          "flipAugmentation": false,
                          "unetLR": 5E-05,
                          "textEncoderLR": 5E-05,
                          "lrSchedulerNumCycles": 3,
                          "engine": "kohya",
                          "model": "urn:air:sdxl:model:civitai:101055@128078",
                          "trainingData": "https://example.com/training-data",
                          "trainingDataImagesCount": 10,
                          "loraName": "mylora",
                          "samplePrompts": []
                        },
                        "priority": "normal",
                        "retries": 1
                      }
                    ],
                    "callbacks": [
                      {
                        "url": "https://example.com/callback",
                        "type": [
                          "workflow:succeeded",
                          "workflow:failed"
                        ]
                      }
                    ],
                    "upgradeMode": "manual"
                  }
                },
                "Comfy job": {
                  "value": {
                    "metadata": {
                      "key1": "value1",
                      "key2": 2
                    },
                    "steps": [
                      {
                        "$type": "comfy",
                        "input": {
                          "comfyWorkflow": {
                            "3": {
                              "class_type": "KSampler",
                              "inputs": {
                                "sampler_name": "euler",
                                "scheduler": "normal",
                                "seed": 740593329207015,
                                "steps": 20,
                                "cfg": 8,
                                "denoise": 1,
                                "model": [
                                  "4",
                                  0
                                ],
                                "positive": [
                                  "6",
                                  0
                                ],
                                "negative": [
                                  "7",
                                  0
                                ],
                                "latent_image": [
                                  "5",
                                  0
                                ]
                              }
                            },
                            "4": {
                              "class_type": "CheckpointLoaderSimple",
                              "inputs": {
                                "ckpt_name": "@civitai/46846"
                              }
                            },
                            "5": {
                              "class_type": "EmptyLatentImage",
                              "inputs": {
                                "width": 512,
                                "height": 512,
                                "batch_size": 1
                              }
                            },
                            "6": {
                              "class_type": "CLIPTextEncode",
                              "inputs": {
                                "text": "beautiful scenery nature glass bottle landscape, purple galaxy bottle",
                                "clip": [
                                  "4",
                                  1
                                ]
                              }
                            },
                            "7": {
                              "class_type": "CLIPTextEncode",
                              "inputs": {
                                "text": "text, watermark",
                                "clip": [
                                  "4",
                                  1
                                ]
                              }
                            },
                            "8": {
                              "class_type": "VAEDecode",
                              "inputs": {
                                "samples": [
                                  "3",
                                  0
                                ],
                                "vae": [
                                  "4",
                                  2
                                ]
                              }
                            },
                            "9": {
                              "class_type": "SaveImage",
                              "inputs": {
                                "filename_prefix": "ComfyUI",
                                "images": [
                                  "8",
                                  0
                                ]
                              }
                            }
                          },
                          "quantity": 1
                        }
                      }
                    ],
                    "callbacks": [
                      {
                        "url": "https://example.com/callback",
                        "type": [
                          "workflow:succeeded",
                          "workflow:failed"
                        ]
                      }
                    ],
                    "upgradeMode": "manual"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowTemplate"
              },
              "examples": {
                "TextToImage": {
                  "value": {
                    "metadata": {
                      "key1": "value1",
                      "key2": 2
                    },
                    "steps": [
                      {
                        "$type": "textToImage",
                        "input": {
                          "quantity": 2,
                          "batchSize": 4,
                          "model": "urn:air:sdxl:model:civitai:101055@128078",
                          "additionalNetworks": {
                            "urn:air:sd1:embedding:civitai:7808@9208": {
                              "triggerWord": "easynegative"
                            }
                          },
                          "controlNets": [],
                          "prompt": "A curious cat",
                          "negativePrompt": "nsfw",
                          "scheduler": "eulerA",
                          "steps": 30,
                          "cfgScale": 7.5,
                          "width": 512,
                          "height": 512,
                          "seed": 1790693947,
                          "clipSkip": 2
                        },
                        "priority": "high",
                        "timeout": "00:05:00",
                        "retries": 5
                      }
                    ],
                    "callbacks": [
                      {
                        "url": "https://example.com/callback",
                        "type": [
                          "workflow:succeeded",
                          "workflow:failed"
                        ]
                      }
                    ],
                    "upgradeMode": "manual"
                  }
                },
                "LORA training": {
                  "value": {
                    "metadata": {
                      "key1": "value1",
                      "key2": 2
                    },
                    "steps": [
                      {
                        "$type": "imageResourceTraining",
                        "input": {
                          "maxTrainEpochs": 5,
                          "numRepeats": 8,
                          "resolution": 512,
                          "enableBucket": true,
                          "shuffleCaption": false,
                          "keepTokens": 0,
                          "clipSkip": 1,
                          "flipAugmentation": false,
                          "unetLR": 5E-05,
                          "textEncoderLR": 5E-05,
                          "lrSchedulerNumCycles": 3,
                          "engine": "kohya",
                          "model": "urn:air:sdxl:model:civitai:101055@128078",
                          "trainingData": "https://example.com/training-data",
                          "trainingDataImagesCount": 10,
                          "loraName": "mylora",
                          "samplePrompts": []
                        },
                        "priority": "normal",
                        "retries": 1
                      }
                    ],
                    "callbacks": [
                      {
                        "url": "https://example.com/callback",
                        "type": [
                          "workflow:succeeded",
                          "workflow:failed"
                        ]
                      }
                    ],
                    "upgradeMode": "manual"
                  }
                },
                "Comfy job": {
                  "value": {
                    "metadata": {
                      "key1": "value1",
                      "key2": 2
                    },
                    "steps": [
                      {
                        "$type": "comfy",
                        "input": {
                          "comfyWorkflow": {
                            "3": {
                              "class_type": "KSampler",
                              "inputs": {
                                "sampler_name": "euler",
                                "scheduler": "normal",
                                "seed": 740593329207015,
                                "steps": 20,
                                "cfg": 8,
                                "denoise": 1,
                                "model": [
                                  "4",
                                  0
                                ],
                                "positive": [
                                  "6",
                                  0
                                ],
                                "negative": [
                                  "7",
                                  0
                                ],
                                "latent_image": [
                                  "5",
                                  0
                                ]
                              }
                            },
                            "4": {
                              "class_type": "CheckpointLoaderSimple",
                              "inputs": {
                                "ckpt_name": "@civitai/46846"
                              }
                            },
                            "5": {
                              "class_type": "EmptyLatentImage",
                              "inputs": {
                                "width": 512,
                                "height": 512,
                                "batch_size": 1
                              }
                            },
                            "6": {
                              "class_type": "CLIPTextEncode",
                              "inputs": {
                                "text": "beautiful scenery nature glass bottle landscape, purple galaxy bottle",
                                "clip": [
                                  "4",
                                  1
                                ]
                              }
                            },
                            "7": {
                              "class_type": "CLIPTextEncode",
                              "inputs": {
                                "text": "text, watermark",
                                "clip": [
                                  "4",
                                  1
                                ]
                              }
                            },
                            "8": {
                              "class_type": "VAEDecode",
                              "inputs": {
                                "samples": [
                                  "3",
                                  0
                                ],
                                "vae": [
                                  "4",
                                  2
                                ]
                              }
                            },
                            "9": {
                              "class_type": "SaveImage",
                              "inputs": {
                                "filename_prefix": "ComfyUI",
                                "images": [
                                  "8",
                                  0
                                ]
                              }
                            }
                          },
                          "quantity": 1
                        }
                      }
                    ],
                    "callbacks": [
                      {
                        "url": "https://example.com/callback",
                        "type": [
                          "workflow:succeeded",
                          "workflow:failed"
                        ]
                      }
                    ],
                    "upgradeMode": "manual"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowTemplate"
              },
              "examples": {
                "TextToImage": {
                  "value": {
                    "metadata": {
                      "key1": "value1",
                      "key2": 2
                    },
                    "steps": [
                      {
                        "$type": "textToImage",
                        "input": {
                          "quantity": 2,
                          "batchSize": 4,
                          "model": "urn:air:sdxl:model:civitai:101055@128078",
                          "additionalNetworks": {
                            "urn:air:sd1:embedding:civitai:7808@9208": {
                              "triggerWord": "easynegative"
                            }
                          },
                          "controlNets": [],
                          "prompt": "A curious cat",
                          "negativePrompt": "nsfw",
                          "scheduler": "eulerA",
                          "steps": 30,
                          "cfgScale": 7.5,
                          "width": 512,
                          "height": 512,
                          "seed": 1790693947,
                          "clipSkip": 2
                        },
                        "priority": "high",
                        "timeout": "00:05:00",
                        "retries": 5
                      }
                    ],
                    "callbacks": [
                      {
                        "url": "https://example.com/callback",
                        "type": [
                          "workflow:succeeded",
                          "workflow:failed"
                        ]
                      }
                    ],
                    "upgradeMode": "manual"
                  }
                },
                "LORA training": {
                  "value": {
                    "metadata": {
                      "key1": "value1",
                      "key2": 2
                    },
                    "steps": [
                      {
                        "$type": "imageResourceTraining",
                        "input": {
                          "maxTrainEpochs": 5,
                          "numRepeats": 8,
                          "resolution": 512,
                          "enableBucket": true,
                          "shuffleCaption": false,
                          "keepTokens": 0,
                          "clipSkip": 1,
                          "flipAugmentation": false,
                          "unetLR": 5E-05,
                          "textEncoderLR": 5E-05,
                          "lrSchedulerNumCycles": 3,
                          "engine": "kohya",
                          "model": "urn:air:sdxl:model:civitai:101055@128078",
                          "trainingData": "https://example.com/training-data",
                          "trainingDataImagesCount": 10,
                          "loraName": "mylora",
                          "samplePrompts": []
                        },
                        "priority": "normal",
                        "retries": 1
                      }
                    ],
                    "callbacks": [
                      {
                        "url": "https://example.com/callback",
                        "type": [
                          "workflow:succeeded",
                          "workflow:failed"
                        ]
                      }
                    ],
                    "upgradeMode": "manual"
                  }
                },
                "Comfy job": {
                  "value": {
                    "metadata": {
                      "key1": "value1",
                      "key2": 2
                    },
                    "steps": [
                      {
                        "$type": "comfy",
                        "input": {
                          "comfyWorkflow": {
                            "3": {
                              "class_type": "KSampler",
                              "inputs": {
                                "sampler_name": "euler",
                                "scheduler": "normal",
                                "seed": 740593329207015,
                                "steps": 20,
                                "cfg": 8,
                                "denoise": 1,
                                "model": [
                                  "4",
                                  0
                                ],
                                "positive": [
                                  "6",
                                  0
                                ],
                                "negative": [
                                  "7",
                                  0
                                ],
                                "latent_image": [
                                  "5",
                                  0
                                ]
                              }
                            },
                            "4": {
                              "class_type": "CheckpointLoaderSimple",
                              "inputs": {
                                "ckpt_name": "@civitai/46846"
                              }
                            },
                            "5": {
                              "class_type": "EmptyLatentImage",
                              "inputs": {
                                "width": 512,
                                "height": 512,
                                "batch_size": 1
                              }
                            },
                            "6": {
                              "class_type": "CLIPTextEncode",
                              "inputs": {
                                "text": "beautiful scenery nature glass bottle landscape, purple galaxy bottle",
                                "clip": [
                                  "4",
                                  1
                                ]
                              }
                            },
                            "7": {
                              "class_type": "CLIPTextEncode",
                              "inputs": {
                                "text": "text, watermark",
                                "clip": [
                                  "4",
                                  1
                                ]
                              }
                            },
                            "8": {
                              "class_type": "VAEDecode",
                              "inputs": {
                                "samples": [
                                  "3",
                                  0
                                ],
                                "vae": [
                                  "4",
                                  2
                                ]
                              }
                            },
                            "9": {
                              "class_type": "SaveImage",
                              "inputs": {
                                "filename_prefix": "ComfyUI",
                                "images": [
                                  "8",
                                  0
                                ]
                              }
                            }
                          },
                          "quantity": 1
                        }
                      }
                    ],
                    "callbacks": [
                      {
                        "url": "https://example.com/callback",
                        "type": [
                          "workflow:succeeded",
                          "workflow:failed"
                        ]
                      }
                    ],
                    "upgradeMode": "manual"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "callbacks": {
          "WorkflowEvent": {
            "{$request.query.callbackUrl}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/WorkflowEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server implementation should return this HTTP status code if the data was received successfully"
                  },
                  "4XX": {
                    "description": "If your server returns an HTTP status code indicating it does not understand the format of the payload the delivery will be treated as a failure. No retries are attempted."
                  },
                  "5XX": {
                    "description": "If your server returns an HTTP status code indicating a server-side error the delivery will be treated as a failure. retries are attempted."
                  }
                }
              }
            }
          },
          "WorkflowStepEvent": {
            "{$request.query.callbackUrl}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/WorkflowStepEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server implementation should return this HTTP status code if the data was received successfully"
                  },
                  "4XX": {
                    "description": "If your server returns an HTTP status code indicating it does not understand the format of the payload the delivery will be treated as a failure. No retries are attempted."
                  },
                  "5XX": {
                    "description": "If your server returns an HTTP status code indicating a server-side error the delivery will be treated as a failure. retries are attempted."
                  }
                }
              }
            }
          },
          "WorkflowStepJobEvent": {
            "{$request.query.callbackUrl}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/WorkflowStepJobEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server implementation should return this HTTP status code if the data was received successfully"
                  },
                  "4XX": {
                    "description": "If your server returns an HTTP status code indicating it does not understand the format of the payload the delivery will be treated as a failure. No retries are attempted."
                  },
                  "5XX": {
                    "description": "If your server returns an HTTP status code indicating a server-side error the delivery will be treated as a failure. retries are attempted."
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Query workflows",
        "operationId": "QueryWorkflows",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "An optional cursor to continue querying workflows from a previous query.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "How many workflows to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "An optional list of tags to query by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "An optional additional query that is used to match workflows through metadata",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to return data from oldest to newest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hideMatureContent",
            "in": "query",
            "description": "When set to true, any blob that has mature won't be available and won't have a URL",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Specify 'application/zip' to get the response as a zip file",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CursedArrayOfTelemetryCursorAndWorkflow"
                }
              },
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/v2/consumer/workflows/{workflowId}": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get workflow",
        "operationId": "GetWorkflow",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The ID of the workflow to get status for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wait",
            "in": "query",
            "description": "Whether to wait for the workflow to complete before returning or to return immediately\r\nThe request may return a 202 if the clients waits for the workflow to complete and the workflow does not complete within the requested timeout. \r\nIn which case the client should use the token to query the status of the workflow.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hideMatureContent",
            "in": "query",
            "description": "When set to true, any blob that has mature won't be available and won't have a URL",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Workflows"
        ],
        "summary": "Update workflow",
        "description": "Updates a worfklow. This can currently be used to cancel a worfklow or override metadata and/or tags",
        "operationId": "UpdateWorkflow",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The ID of the worfklow to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details to update on the workflow.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Workflows"
        ],
        "summary": "Patch workflow",
        "description": "Patches a worfklow using JSON Patch. This can currently be used to cancel a worfklow, update metadata and add additional tags",
        "operationId": "PatchWorkflow",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The ID of the workflow to patch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A valid PATCH document",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatchDocument"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Workflows"
        ],
        "summary": "Delete workflow",
        "description": "This will delete a workflow. This may trigger a refund if the work requested with this workflow has not yet started",
        "operationId": "DeleteWorkflow",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The ID of the workflow to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/consumer/workflows/{workflowId}/tags": {
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Add workflow tag",
        "description": "Adds a tag to a workflow",
        "operationId": "AddWorkflowTag",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The ID of the worfklow to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The the tag to add to the workflow.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Workflows"
        ],
        "summary": "Delete all workflow tags",
        "operationId": "RemoveAllWorkflowTags",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The ID of the worfklow to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/consumer/workflows/{workflowId}/tags/{tag}": {
      "delete": {
        "tags": [
          "Workflows"
        ],
        "summary": "Delete workflow tag",
        "operationId": "RemoveWorkflowTag",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The ID of the worfklow to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "path",
            "description": "The the tag to remove from the workflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v2/consumer/workflows/{workflowId}/steps/{stepName}": {
      "get": {
        "tags": [
          "WorkflowSteps"
        ],
        "summary": "Get the status of a workflow step",
        "operationId": "GetWorkflowStep",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The id of the workflow to get status for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stepName",
            "in": "path",
            "description": "The name of the step within the workflow to get status for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStep"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "WorkflowSteps"
        ],
        "summary": "Updates a step within a particular workflow.",
        "operationId": "UpdateWorkflowStep",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The id of the workflow to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stepName",
            "in": "path",
            "description": "The name of the step to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details to update on the workflow step.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowStepRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowStepRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowStepRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "WorkflowSteps"
        ],
        "operationId": "PatchWorkflowStep",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stepName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatchDocument"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AgeClassificationInput": {
        "required": [
          "mediaUrl"
        ],
        "type": "object",
        "properties": {
          "model": {
            "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\/.=,]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
            "type": "string",
            "description": "An optional model to use for age classification. If not provided, the default model will determined by the worker",
            "nullable": true
          },
          "mediaUrl": {
            "type": "string",
            "description": "The URL of the media to classify. This can either be a URL to an image or a video or a ZIP containing multiple images",
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "AgeClassificationOutput": {
        "required": [
          "hasMinor",
          "labels",
          "prediction"
        ],
        "type": "object",
        "properties": {
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AgeClassifierLabel"
              }
            }
          },
          "hasMinor": {
            "type": "boolean"
          },
          "prediction": {
            "$ref": "#/components/schemas/AgeClassificationPrediction"
          }
        },
        "additionalProperties": false
      },
      "AgeClassificationPrediction": {
        "enum": [
          "pass",
          "fail"
        ],
        "type": "string"
      },
      "AgeClassificationStep": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStep"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/AgeClassificationInput"
              },
              "output": {
                "$ref": "#/components/schemas/AgeClassificationOutput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "ageClassification"
            ],
            "type": "string"
          }
        },
        "description": "Age classification"
      },
      "AgeClassificationStepTemplate": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStepTemplate"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/AgeClassificationInput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "ageClassification"
            ],
            "type": "string"
          }
        },
        "description": "Age classification"
      },
      "AgeClassifierLabel": {
        "required": [
          "age",
          "boundingBox",
          "isMinor"
        ],
        "type": "object",
        "properties": {
          "age": {
            "type": "string"
          },
          "isMinor": {
            "type": "boolean"
          },
          "boundingBox": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "additionalProperties": false
      },
      "BatchOCRSafetyClassificationInput": {
        "required": [
          "mediaUrls"
        ],
        "type": "object",
        "properties": {
          "mediaUrls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "additionalProperties": false
      },
      "BatchOCRSafetyClassificationOutput": {
        "required": [
          "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatchOCRSafetyClassificationResult"
            }
          }
        },
        "additionalProperties": false
      },
      "BatchOCRSafetyClassificationResult": {
        "required": [
          "classification",
          "mediaUrl"
        ],
        "type": "object",
        "properties": {
          "mediaUrl": {
            "type": "string",
            "format": "uri"
          },
          "classification": {
            "type": "string"
          },
          "text": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Blob": {
        "required": [
          "available",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Gets the id of the blob that contains this image."
          },
          "available": {
            "type": "boolean",
            "description": "Gets a value indicating whether the blob is available."
          },
          "url": {
            "type": "string",
            "description": "Gets a url that can be used to preview the blob.",
            "format": "uri",
            "nullable": true
          },
          "urlExpiresAt": {
            "type": "string",
            "description": "Get when the url is set to expire",
            "format": "date-time",
            "nullable": true
          },
          "jobId": {
            "type": "string",
            "description": "Get the id of the job that is associated with this blob.",
            "nullable": true
          },
          "nsfwLevel": {
            "$ref": "#/components/schemas/NSFWLevel"
          },
          "blockedReason": {
            "type": "string",
            "description": "Get an optional reason for why the blob was blocked. This is only set if the blob was blocked.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a blob that gets produced as part of a specific job",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "image": "#/components/schemas/ImageBlob",
            "video": "#/components/schemas/VideoBlob"
          }
        }
      },
      "BuzzClientAccount": {
        "enum": [
          "yellow",
          "blue",
          "green",
          "fakeRed"
        ],
        "type": "string"
      },
      "ComfyInput": {
        "required": [
          "comfyWorkflow"
        ],
        "type": "object",
        "properties": {
          "comfyWorkflow": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ComfyNode"
            },
            "description": "Get the comfy workflow that needs to be executed"
          },
          "quantity": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The number of jobs to start with this workflow.",
            "format": "int32",
            "default": 1
          },
          "imageMetadata": {
            "type": "string",
            "description": "External metadata that will be stored with the image",
            "nullable": true
          },
          "useSpineComfy": {
            "type": "boolean",
            "description": "Opt-into using the spine controller exclusively",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ComfyNode": {
        "required": [
          "classType",
          "inputs"
        ],
        "type": "object",
        "properties": {
          "classType": {
            "type": "string"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "isChanged": {
            "type": "string",
            "nullable": true
          },
          "inputs": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "ComfyOutput": {
        "type": "object",
        "properties": {
          "blobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Blob"
            },
            "description": "Get a list of blobs that got generated by this comfy workflow step."
          }
        },
        "additionalProperties": false
      },
      "ComfyStep": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStep"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/ComfyInput"
              },
              "output": {
                "$ref": "#/components/schemas/ComfyOutput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "comfy"
            ],
            "type": "string"
          }
        },
        "description": "Comfy workflows"
      },
      "ComfyStepTemplate": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStepTemplate"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/ComfyInput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "comfy"
            ],
            "type": "string"
          }
        },
        "description": "Comfy workflows"
      },
      "ContainerFormat": {
        "enum": [
          "mp4",
          "webM"
        ],
        "type": "string"
      },
      "CursedArrayOfTelemetryCursorAndWorkflow": {
        "required": [
          "items",
          "next"
        ],
        "type": "object",
        "properties": {
          "next": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Workflow"
            }
          }
        },
        "additionalProperties": false
      },
      "EchoInput": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The message to be returned in the output."
          }
        },
        "additionalProperties": false,
        "description": "Represents the input information needed for the Echo workflow step."
      },
      "EchoOutput": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The message to be returned."
          }
        },
        "additionalProperties": false,
        "description": "Represents the output information returned from the Echo workflow step."
      },
      "EchoStep": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStep"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/EchoInput"
              },
              "output": {
                "$ref": "#/components/schemas/EchoOutput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "echo"
            ],
            "type": "string"
          }
        },
        "description": "Echo"
      },
      "EchoStepTemplate": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStepTemplate"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/EchoInput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "echo"
            ],
            "type": "string"
          }
        },
        "description": "Echo"
      },
      "EpochResult": {
        "required": [
          "blobName",
          "blobUrl"
        ],
        "type": "object",
        "properties": {
          "epochNumber": {
            "type": "integer",
            "format": "int32"
          },
          "blobName": {
            "type": "string",
            "description": "Get the name of the generated epoch assets"
          },
          "blobSize": {
            "type": "integer",
            "description": "Get the total size in bytes of the asset",
            "format": "int64",
            "nullable": true
          },
          "sampleImages": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "Get a list of the names of the blobs that represent sample images"
          },
          "blobUrl": {
            "type": "string",
            "description": "A presigned url that points to the epoch file",
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "description": "An epock result."
      },
      "FileFormat": {
        "enum": [
          "unknown",
          "safeTensor",
          "pickleTensor",
          "diffusers",
          "coreML",
          "onnx"
        ],
        "type": "string"
      },
      "Flux1KontextDevImageGenInput": {
        "required": [
          "model"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Flux1KontextImageGenInput"
          },
          {
            "type": "object",
            "properties": {
              "model": {
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "model": {
            "enum": [
              "dev"
            ],
            "type": "string"
          }
        }
      },
      "Flux1KontextImageGenInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageGenInput"
          },
          {
            "required": [
              "model",
              "prompt"
            ],
            "type": "object",
            "properties": {
              "model": {
                "type": "string",
                "readOnly": true
              },
              "prompt": {
                "maxLength": 1000,
                "minLength": 0,
                "type": "string"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Either A URL, A DataURL or a Base64 string"
                }
              },
              "aspectRatio": {
                "enum": [
                  "21:9",
                  "16:9",
                  "4:3",
                  "3:2",
                  "1:1",
                  "2:3",
                  "3:4",
                  "9:16",
                  "9:21"
                ],
                "type": "string"
              },
              "outputFormat": {
                "enum": [
                  "jpeg",
                  "png"
                ],
                "type": "string"
              },
              "guidanceScale": {
                "maximum": 20,
                "minimum": 1,
                "type": "number",
                "format": "double"
              },
              "quantity": {
                "maximum": 4,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              },
              "seed": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "model",
              "mapping": {
                "pro": "#/components/schemas/Flux1KontextProImageGenInput",
                "max": "#/components/schemas/Flux1KontextMaxImageGenInput",
                "dev": "#/components/schemas/Flux1KontextDevImageGenInput"
              }
            }
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "flux1-kontext"
            ],
            "type": "string"
          }
        }
      },
      "Flux1KontextMaxImageGenInput": {
        "required": [
          "model"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Flux1KontextImageGenInput"
          },
          {
            "type": "object",
            "properties": {
              "model": {
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "model": {
            "enum": [
              "max"
            ],
            "type": "string"
          }
        }
      },
      "Flux1KontextProImageGenInput": {
        "required": [
          "model"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Flux1KontextImageGenInput"
          },
          {
            "type": "object",
            "properties": {
              "model": {
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "model": {
            "enum": [
              "pro"
            ],
            "type": "string"
          }
        }
      },
      "FluxDevFastImageResourceTrainingInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageResourceTrainingInput"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "flux-dev-fast"
            ],
            "type": "string"
          }
        }
      },
      "Gemini25FlashCreateImageGenInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Gemini25FlashImageGenInput"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "createImage"
            ],
            "type": "string"
          }
        }
      },
      "Gemini25FlashEditImageGenInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Gemini25FlashImageGenInput"
          },
          {
            "required": [
              "images"
            ],
            "type": "object",
            "properties": {
              "images": {
                "maxItems": 4,
                "minItems": 1,
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Either A URL, A DataURL or a Base64 string"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "editImage"
            ],
            "type": "string"
          }
        }
      },
      "Gemini25FlashImageGenInput": {
        "required": [
          "model"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/GeminiImageGenInput"
          },
          {
            "required": [
              "operation"
            ],
            "type": "object",
            "properties": {
              "operation": {
                "type": "string"
              },
              "quantity": {
                "maximum": 4,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "operation",
              "mapping": {
                "createImage": "#/components/schemas/Gemini25FlashCreateImageGenInput",
                "editImage": "#/components/schemas/Gemini25FlashEditImageGenInput"
              }
            }
          }
        ],
        "properties": {
          "model": {
            "enum": [
              "2.5-flash"
            ],
            "type": "string"
          }
        }
      },
      "GeminiImageGenInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageGenInput"
          },
          {
            "required": [
              "model",
              "prompt"
            ],
            "type": "object",
            "properties": {
              "model": {
                "type": "string"
              },
              "prompt": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "model",
              "mapping": {
                "2.5-flash": "#/components/schemas/Gemini25FlashImageGenInput"
              }
            }
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "gemini"
            ],
            "type": "string"
          }
        }
      },
      "GoogleImageGenInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageGenInput"
          },
          {
            "required": [
              "model",
              "prompt"
            ],
            "type": "object",
            "properties": {
              "model": {
                "type": "string"
              },
              "prompt": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "model",
              "mapping": {
                "imagen4": "#/components/schemas/Imagen4ImageGenInput"
              }
            }
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "google"
            ],
            "type": "string"
          }
        }
      },
      "HaiperVideoGenAspectRatio": {
        "enum": [
          "16:9",
          "4:3",
          "1:1",
          "9:16",
          "3:4"
        ],
        "type": "string"
      },
      "HaiperVideoGenCameraMovement": {
        "enum": [
          "none",
          "panRight",
          "panLeft",
          "tiltUp",
          "tiltDown",
          "zoomIn",
          "zoomOut"
        ],
        "type": "string"
      },
      "HaiperVideoGenInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/VideoGenInput"
          },
          {
            "type": "object",
            "properties": {
              "negativePrompt": {
                "type": "string",
                "nullable": true
              },
              "cameraMovement": {
                "$ref": "#/components/schemas/HaiperVideoGenCameraMovement"
              },
              "seed": {
                "maximum": 4294967295,
                "minimum": -1,
                "type": "integer",
                "format": "int64"
              },
              "duration": {
                "enum": [
                  2,
                  4,
                  8
                ],
                "type": "integer",
                "format": "int32"
              },
              "aspectRatio": {
                "$ref": "#/components/schemas/HaiperVideoGenAspectRatio"
              },
              "model": {
                "$ref": "#/components/schemas/HaiperVideoGenModel"
              },
              "resolution": {
                "enum": [
                  720,
                  1080,
                  2160
                ],
                "type": "integer",
                "format": "int32"
              },
              "enablePromptEnhancer": {
                "type": "boolean"
              },
              "sourceImage": {
                "type": "string",
                "description": "Either A URL, A DataURL or a Base64 string",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "haiper"
            ],
            "type": "string"
          }
        }
      },
      "HaiperVideoGenModel": {
        "enum": [
          "v1_5",
          "v2"
        ],
        "type": "string"
      },
      "HaiperVideoGenOutput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VideoGenOutput"
          },
          {
            "type": "object",
            "properties": {
              "progress": {
                "type": "number",
                "format": "double",
                "nullable": true
              },
              "externalTOSViolation": {
                "type": "boolean",
                "nullable": true
              },
              "message": {
                "type": "string",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "HumanoidImageMaskCategory": {
        "enum": [
          "dresses",
          "upperBody",
          "lowerBody"
        ],
        "type": "string"
      },
      "HumanoidImageMaskInput": {
        "required": [
          "category",
          "imageUrl"
        ],
        "type": "object",
        "properties": {
          "imageUrl": {
            "type": "string",
            "format": "uri"
          },
          "category": {
            "$ref": "#/components/schemas/HumanoidImageMaskCategory"
          }
        },
        "additionalProperties": false
      },
      "HumanoidImageMaskOutput": {
        "required": [
          "blob"
        ],
        "type": "object",
        "properties": {
          "blob": {
            "$ref": "#/components/schemas/Blob"
          }
        },
        "additionalProperties": false
      },
      "HunyuanVdeoGenInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/VideoGenInput"
          },
          {
            "type": "object",
            "properties": {
              "cfgScale": {
                "maximum": 100,
                "minimum": 0,
                "type": "number",
                "format": "double",
                "default": 4
              },
              "frameRate": {
                "type": "integer",
                "format": "int32",
                "default": 25
              },
              "duration": {
                "maximum": 30,
                "minimum": 1,
                "type": "integer",
                "format": "int32",
                "default": 5
              },
              "seed": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "steps": {
                "maximum": 50,
                "minimum": 10,
                "type": "integer",
                "format": "int32",
                "default": 20
              },
              "width": {
                "type": "integer",
                "format": "int32"
              },
              "height": {
                "type": "integer",
                "format": "int32"
              },
              "loras": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VideoGenInputLora"
                }
              },
              "model": {
                "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\/.=,]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
                "type": "string",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "hunyuan"
            ],
            "type": "string"
          }
        }
      },
      "ImageBlob": {
        "required": [
          "type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Blob"
          },
          {
            "type": "object",
            "properties": {
              "width": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "height": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "type": {
            "enum": [
              "image"
            ],
            "type": "string"
          }
        }
      },
      "ImageGenInput": {
        "required": [
          "engine"
        ],
        "type": "object",
        "properties": {
          "engine": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "engine",
          "mapping": {
            "openai": "#/components/schemas/OpenApiImageGenInput",
            "flux1-kontext": "#/components/schemas/Flux1KontextImageGenInput",
            "google": "#/components/schemas/GoogleImageGenInput",
            "wan": "#/components/schemas/WanImageGenInput",
            "gemini": "#/components/schemas/GeminiImageGenInput",
            "qwen": "#/components/schemas/QwenImageGenInput",
            "seedream": "#/components/schemas/SeedreamImageGenInput"
          }
        }
      },
      "ImageGenInputLora": {
        "required": [
          "air"
        ],
        "type": "object",
        "properties": {
          "air": {
            "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\/.=,]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
            "type": "string"
          },
          "strength": {
            "maximum": 4,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "ImageGenOutput": {
        "required": [
          "images"
        ],
        "type": "object",
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageBlob"
            },
            "description": "A collection of output images."
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An optional list of errors related to generation failures",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImageGenStep": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStep"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/ImageGenInput"
              },
              "output": {
                "$ref": "#/components/schemas/ImageGenOutput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "imageGen"
            ],
            "type": "string"
          }
        },
        "description": "Image Generation"
      },
      "ImageGenStepTemplate": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStepTemplate"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/ImageGenInput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "imageGen"
            ],
            "type": "string"
          }
        },
        "description": "Image Generation"
      },
      "ImageJobControlNet": {
        "type": "object",
        "properties": {
          "preprocessor": {
            "$ref": "#/components/schemas/ImageTransformer"
          },
          "weight": {
            "type": "number",
            "description": "A value representing the weight applied to the ControlNet.",
            "format": "double"
          },
          "startStep": {
            "type": "number",
            "description": "A value representing the start step selected for the ControlNet.",
            "format": "double"
          },
          "endStep": {
            "type": "number",
            "description": "A value representing the end step selected for the ControlNet.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Information for a controlnet provided for a text to image input."
      },
      "ImageJobNetworkParams": {
        "type": "object",
        "properties": {
          "strength": {
            "type": "number",
            "description": "In case of Lora and LoCon, set the strength of the network",
            "format": "double",
            "nullable": true
          },
          "triggerWord": {
            "type": "string",
            "description": "In case of a TextualInversion, set the trigger word of the network",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "A legacy type set by the consumer",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImageResouceTrainingModerationStatus": {
        "enum": [
          "evaluating",
          "underReview",
          "approved",
          "rejected"
        ],
        "type": "string"
      },
      "ImageResourceTrainingInput": {
        "required": [
          "engine",
          "model",
          "trainingData",
          "trainingDataImagesCount"
        ],
        "type": "object",
        "properties": {
          "engine": {
            "type": "string"
          },
          "model": {
            "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\/.=,]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
            "type": "string",
            "description": "The primary model to train upon."
          },
          "trainingData": {
            "type": "string",
            "description": "A url referring data to use in training.",
            "format": "uri"
          },
          "trainingDataImagesCount": {
            "type": "integer",
            "description": "The number of images embedded in this training data. This is used to calculate the cost of training.",
            "format": "int32"
          },
          "loraName": {
            "type": "string",
            "description": "The desired lora name.",
            "default": "my-lora"
          },
          "samplePrompts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A selection of sample prompts."
          },
          "negativePrompt": {
            "type": "string",
            "description": "An optional negative prompt that will get applied when generating samples",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Input for an image resource training step.",
        "discriminator": {
          "propertyName": "engine",
          "mapping": {
            "kohya": "#/components/schemas/KohyaImageResourceTrainingInput",
            "flux-dev-fast": "#/components/schemas/FluxDevFastImageResourceTrainingInput",
            "musubi": "#/components/schemas/MusubiImageResourceTrainingInput"
          }
        }
      },
      "ImageResourceTrainingOutput": {
        "required": [
          "epochs",
          "moderationStatus",
          "sampleImagesPrompts"
        ],
        "type": "object",
        "properties": {
          "moderationStatus": {
            "$ref": "#/components/schemas/ImageResouceTrainingModerationStatus"
          },
          "epochs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EpochResult"
            },
            "description": "An array of epochs."
          },
          "sampleImagesPrompts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The selected prompts for sample images"
          },
          "sampleInputImages": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "The selected images for sample images",
            "nullable": true
          },
          "storedAsAssets": {
            "type": "boolean",
            "description": "Get wether the blobs are actually stored as assets\r\nAssets are deprecated and require a different retrieval mechanism",
            "nullable": true
          },
          "eta": {
            "type": "number",
            "description": "Get an estimate in minutes on how long the work is expected to take",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImageResourceTrainingStep": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStep"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/ImageResourceTrainingInput"
              },
              "output": {
                "$ref": "#/components/schemas/ImageResourceTrainingOutput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "imageResourceTraining"
            ],
            "type": "string"
          }
        },
        "description": "LORA Training"
      },
      "ImageResourceTrainingStepTemplate": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStepTemplate"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/ImageResourceTrainingInput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "imageResourceTraining"
            ],
            "type": "string"
          }
        },
        "description": "LORA Training"
      },
      "ImageTransformer": {
        "enum": [
          "canny",
          "depthZoe",
          "softedgePidinet",
          "rembg"
        ],
        "type": "string",
        "description": "Available image transformers."
      },
      "ImageUploadOutput": {
        "required": [
          "blob"
        ],
        "type": "object",
        "properties": {
          "blob": {
            "$ref": "#/components/schemas/Blob"
          }
        },
        "additionalProperties": false
      },
      "ImageUploadStep": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStep"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "type": "string",
                "description": "The workflow's input."
              },
              "output": {
                "$ref": "#/components/schemas/ImageUploadOutput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "imageUpload"
            ],
            "type": "string"
          }
        },
        "description": "Image upload"
      },
      "ImageUploadStepTemplate": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStepTemplate"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "type": "string",
                "description": "Input for the ImageUploadStep step.",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "imageUpload"
            ],
            "type": "string"
          }
        },
        "description": "Image upload"
      },
      "Imagen4ImageGenInput": {
        "required": [
          "model"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/GoogleImageGenInput"
          },
          {
            "required": [
              "prompt"
            ],
            "type": "object",
            "properties": {
              "prompt": {
                "maxLength": 1000,
                "minLength": 0,
                "type": "string"
              },
              "negativePrompt": {
                "maxLength": 1000,
                "minLength": 0,
                "type": "string"
              },
              "aspectRatio": {
                "enum": [
                  "1:1",
                  "16:9",
                  "9:16",
                  "3:4",
                  "4:3"
                ],
                "type": "string"
              },
              "numImages": {
                "maximum": 4,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              },
              "seed": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "model": {
            "enum": [
              "imagen4"
            ],
            "type": "string"
          }
        }
      },
      "JobSupport": {
        "enum": [
          "unsupported",
          "unavailable",
          "available"
        ],
        "type": "string",
        "description": "Available levels of job support."
      },
      "JsonPatchDocument": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/JsonPatchOperation"
        },
        "description": "Array of operations to perform"
      },
      "JsonPatchOperation": {
        "required": [
          "op",
          "path"
        ],
        "type": "object",
        "properties": {
          "op": {
            "enum": [
              "add",
              "remove",
              "replace",
              "move",
              "copy",
              "test"
            ],
            "type": "string",
            "description": "The operation type. Allowed values: 'add', 'remove', 'replace', 'move', 'copy', 'test'."
          },
          "path": {
            "type": "string",
            "description": "The JSON Pointer path to the property in the target document where the operation is to be applied."
          },
          "from": {
            "type": "string",
            "description": "Should be a path, required when using move, copy"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "object"
              },
              {
                "type": "array"
              }
            ],
            "description": "The value to apply for 'add', 'replace', or 'test' operations. Not required for 'remove', 'move', or 'copy'.",
            "nullable": true
          }
        },
        "description": "Describes a single operation in a JSON Patch document. Includes the operation type, the target property path, and the value to be used."
      },
      "KlingCameraControl": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/KlingCameraControlConfig"
          }
        },
        "additionalProperties": false
      },
      "KlingCameraControlConfig": {
        "type": "object",
        "properties": {
          "horizontal": {
            "maximum": 10,
            "minimum": -10,
            "type": "number",
            "description": "Horizontal, controls the camera's movement along the horizontal axis (translation along the x-axis).",
            "format": "double",
            "nullable": true
          },
          "vertical": {
            "maximum": 10,
            "minimum": -10,
            "type": "number",
            "description": "Vertical, controls the camera's movement along the vertical axis (translation along the y-axis).",
            "format": "double",
            "nullable": true
          },
          "pan": {
            "maximum": 10,
            "minimum": -10,
            "type": "number",
            "description": "Pan, controls the camera's rotation in the horizontal plane (rotation around the y-axis).",
            "format": "double",
            "nullable": true
          },
          "tilt": {
            "maximum": 10,
            "minimum": -10,
            "type": "number",
            "description": "Tilt, controls the camera's rotation in the horizontal plane (rotation around the y-axis).",
            "format": "double",
            "nullable": true
          },
          "roll": {
            "maximum": 10,
            "minimum": -10,
            "type": "number",
            "description": "Roll, controls the camera's rolling amount (rotation around the z-axis).",
            "format": "double",
            "nullable": true
          },
          "zoom": {
            "maximum": 10,
            "minimum": -10,
            "type": "number",
            "description": "Zoom, controls the change in the camera's focal length, affecting the proximity of the field of view.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "KlingMode": {
        "enum": [
          "standard",
          "professional"
        ],
        "type": "string"
      },
      "KlingModel": {
        "enum": [
          "v1",
          "v1.5",
          "v1.6",
          "v2",
          "v2.5-turbo"
        ],
        "type": "string"
      },
      "KlingVideoGenAspectRatio": {
        "enum": [
          "16:9",
          "9:16",
          "1:1"
        ],
        "type": "string"
      },
      "KlingVideoGenDuration": {
        "enum": [
          "5",
          "10"
        ],
        "type": "string"
      },
      "KlingVideoGenInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/VideoGenInput"
          },
          {
            "type": "object",
            "properties": {
              "model": {
                "$ref": "#/components/schemas/KlingModel"
              },
              "negativePrompt": {
                "type": "string",
                "nullable": true
              },
              "cfgScale": {
                "maximum": 1,
                "minimum": 0,
                "type": "number",
                "format": "double",
                "default": 0.5
              },
              "mode": {
                "$ref": "#/components/schemas/KlingMode"
              },
              "aspectRatio": {
                "$ref": "#/components/schemas/KlingVideoGenAspectRatio"
              },
              "duration": {
                "$ref": "#/components/schemas/KlingVideoGenDuration"
              },
              "cameraControl": {
                "$ref": "#/components/schemas/KlingCameraControl"
              },
              "sourceImageUrl": {
                "type": "string",
                "format": "uri",
                "nullable": true
              },
              "sourceImage": {
                "type": "string",
                "description": "Either A URL, A DataURL or a Base64 string",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "kling"
            ],
            "type": "string"
          }
        }
      },
      "KohyaImageResourceTrainingInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageResourceTrainingInput"
          },
          {
            "type": "object",
            "properties": {
              "maxTrainEpochs": {
                "maximum": 20,
                "minimum": 0,
                "type": "integer",
                "description": "An epoch is one set of learning. By default, we will save a maximum of 20 epochs (evenly distributed), and they are all available for download.",
                "format": "int32",
                "default": 5
              },
              "numRepeats": {
                "maximum": 5000,
                "minimum": 1,
                "type": "integer",
                "description": "Num Repeats defines how many times each individual image gets put into VRAM. As opposed to batch size, which is how many images are placed into VRAM at once.",
                "format": "int32",
                "default": 8
              },
              "trainBatchSize": {
                "maximum": 9,
                "minimum": 1,
                "type": "integer",
                "description": "Batch size is the number of images that will be placed into VRAM at once. A batch size of 2 will train two images at a time, simultaneously.",
                "format": "int32",
                "nullable": true
              },
              "resolution": {
                "maximum": 1024,
                "minimum": 512,
                "type": "integer",
                "description": "Specify the maximum resolution of training images. If the training images exceed the resolution specified here, they will be scaled down to this resolution",
                "format": "int32",
                "nullable": true
              },
              "enableBucket": {
                "type": "boolean",
                "description": "Sorts images into buckets by size for the purposes of training. If your training images are all the same size, you can turn this option off, but leaving it on has no effect.",
                "default": true
              },
              "shuffleCaption": {
                "type": "boolean",
                "description": "Randomly changes the order of your tags during training. The intent of shuffling is to improve learning. If you are using captions (sentences), this option has no meaning.",
                "default": false
              },
              "keepTokens": {
                "maximum": 3,
                "minimum": 0,
                "type": "integer",
                "description": "If your training images have tags, you can randomly shuffle them.\r\nHowever, if you have words that you want to keep at the beginning, you can use this option to specify \"Keep the first 0 words at the beginning\".\r\nThis option does nothing if the Shuffle Tags option is off.",
                "format": "int32",
                "default": 0
              },
              "clipSkip": {
                "maximum": 4,
                "minimum": 1,
                "type": "integer",
                "description": "Determines which layer's vector output will be used. There are 12 layers, and setting the skip will select \"xth from the end\" of the total layers. For anime, we use 2. For everything else, 1.",
                "format": "int32"
              },
              "flipAugmentation": {
                "type": "boolean",
                "description": "If this option is turned on, the image will be horizontally flipped randomly. It can learn left and right angles, which is useful when you want to learn symmetrical people and objects.",
                "default": false
              },
              "unetLR": {
                "maximum": 1,
                "minimum": 0,
                "type": "number",
                "description": "Sets the learning rate for U-Net. This is the learning rate when performing additional learning on each attention block (and other blocks depending on the setting) in U-Net",
                "format": "double",
                "default": 5E-05
              },
              "textEncoderLR": {
                "maximum": 1,
                "minimum": 0,
                "type": "number",
                "description": "Sets the learning rate for the text encoder. The effect of additional training on text encoders affects the entire U-Net.",
                "format": "double",
                "default": 5E-05
              },
              "lrScheduler": {
                "enum": [
                  "constant",
                  "cosine",
                  "cosine_with_restarts",
                  "linear"
                ],
                "type": "string",
                "description": "You can change the learning rate in the middle of learning. A scheduler is a setting for how to change the learning rate.",
                "nullable": true
              },
              "lrSchedulerNumCycles": {
                "maximum": 4,
                "minimum": 1,
                "type": "integer",
                "description": "This option specifies how many cycles the scheduler runs during training. It is only used when \"cosine_with_restarts\" or \"polynomial\" is used as the scheduler.",
                "format": "int32",
                "default": 3
              },
              "minSnrGamma": {
                "maximum": 20,
                "minimum": 0,
                "type": "integer",
                "description": "Learning is performed by putting noise of various strengths on the training image,\r\nbut depending on the difference in strength of the noise on which it is placed, learning will be\r\nstable by moving closer to or farther from the learning target.\r\n            \r\nMin SNR gamma was introduced to compensate for that. When learning images have little noise,\r\nit may deviate greatly from the target, so try to suppress this jump.",
                "format": "int32",
                "nullable": true
              },
              "networkDim": {
                "maximum": 256,
                "minimum": 1,
                "type": "integer",
                "description": "The larger the Dim setting, the more learning information can be stored, but the possibility of learning unnecessary information other than the learning target increases. A larger Dim also increases LoRA file size.",
                "format": "int32",
                "nullable": true
              },
              "networkAlpha": {
                "maximum": 256,
                "minimum": 1,
                "type": "integer",
                "description": "The smaller the Network alpha value, the larger the stored LoRA neural net weights.\r\nFor example, with an Alpha of 16 and a Dim of 32, the strength of the weight used is 16/32 = 0.5,\r\nmeaning that the learning rate is only half as powerful as the Learning Rate setting.\r\n            \r\nIf Alpha and Dim are the same number, the strength used will be 1 and will have no effect on the learning rate.",
                "format": "int32",
                "nullable": true
              },
              "noiseOffset": {
                "maximum": 1,
                "minimum": 0,
                "type": "number",
                "description": "Adds noise to training images. 0 adds no noise at all. A value of 1 adds strong noise.",
                "format": "double",
                "nullable": true
              },
              "optimizerType": {
                "type": "string",
                "description": "The optimizer determines how to update the neural net weights during training.\r\nVarious methods have been proposed for smart learning, but the most commonly used in LoRA learning\r\nis \"AdamW8bit\" or \"Adafactor\" for SDXL.",
                "nullable": true
              },
              "targetSteps": {
                "type": "integer",
                "format": "int32",
                "nullable": true,
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "kohya"
            ],
            "type": "string"
          }
        }
      },
      "LightricksAspectRatio": {
        "enum": [
          "1:1",
          "16:9",
          "9:16",
          "3:2",
          "2:3"
        ],
        "type": "string"
      },
      "LightricksVideoGenInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/VideoGenInput"
          },
          {
            "type": "object",
            "properties": {
              "negativePrompt": {
                "type": "string",
                "nullable": true
              },
              "cfgScale": {
                "maximum": 100,
                "minimum": 0,
                "type": "number",
                "format": "double",
                "default": 4
              },
              "frameRate": {
                "type": "integer",
                "format": "int32",
                "default": 25
              },
              "duration": {
                "maximum": 30,
                "minimum": 1,
                "type": "integer",
                "format": "int32",
                "default": 5
              },
              "seed": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "steps": {
                "maximum": 50,
                "minimum": 10,
                "type": "integer",
                "format": "int32",
                "default": 20
              },
              "aspectRatio": {
                "$ref": "#/components/schemas/LightricksAspectRatio"
              },
              "sourceImage": {
                "type": "string",
                "description": "Either A URL, A DataURL or a Base64 string",
                "nullable": true
              },
              "expandPrompt": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "lightricks"
            ],
            "type": "string"
          }
        }
      },
      "MiniMaxVideoGenInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/VideoGenInput"
          },
          {
            "type": "object",
            "properties": {
              "model": {
                "$ref": "#/components/schemas/MiniMaxVideoGenModel"
              },
              "enablePromptEnhancer": {
                "type": "boolean"
              },
              "sourceImage": {
                "type": "string",
                "description": "Either A URL, A DataURL or a Base64 string",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "minimax"
            ],
            "type": "string"
          }
        }
      },
      "MiniMaxVideoGenModel": {
        "enum": [
          "hailou"
        ],
        "type": "string"
      },
      "MochiVideoGenInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/VideoGenInput"
          },
          {
            "type": "object",
            "properties": {
              "seed": {
                "maximum": 2147483647,
                "minimum": -1,
                "type": "integer",
                "format": "int64"
              },
              "enablePromptEnhancer": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "mochi"
            ],
            "type": "string"
          }
        }
      },
      "MusubiImageResourceTrainingInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageResourceTrainingInput"
          },
          {
            "type": "object",
            "properties": {
              "maxTrainEpochs": {
                "maximum": 20,
                "minimum": 0,
                "type": "integer",
                "description": "An epoch is one set of learning. By default, we will save a maximum of 20 epochs (evenly distributed), and they are all available for download.",
                "format": "int32",
                "default": 5
              },
              "numRepeats": {
                "maximum": 5000,
                "minimum": 1,
                "type": "integer",
                "description": "Num Repeats defines how many times each individual image gets put into VRAM. As opposed to batch size, which is how many images are placed into VRAM at once.",
                "format": "int32",
                "default": 8
              },
              "trainBatchSize": {
                "maximum": 9,
                "minimum": 1,
                "type": "integer",
                "description": "Batch size is the number of images that will be placed into VRAM at once. A batch size of 2 will train two images at a time, simultaneously.",
                "format": "int32",
                "nullable": true
              },
              "resolution": {
                "maximum": 1024,
                "minimum": 512,
                "type": "integer",
                "description": "Specify the maximum resolution of training images. If the training images exceed the resolution specified here, they will be scaled down to this resolution",
                "format": "int32",
                "nullable": true
              },
              "enableBucket": {
                "type": "boolean",
                "description": "Sorts images into buckets by size for the purposes of training. If your training images are all the same size, you can turn this option off, but leaving it on has no effect.",
                "default": true
              },
              "unetLR": {
                "maximum": 1,
                "minimum": 0,
                "type": "number",
                "description": "Sets the learning rate for U-Net. This is the learning rate when performing additional learning on each attention block (and other blocks depending on the setting) in U-Net",
                "format": "double",
                "default": 5E-05
              },
              "lrScheduler": {
                "enum": [
                  "constant",
                  "cosine",
                  "cosine_with_restarts",
                  "linear"
                ],
                "type": "string",
                "description": "You can change the learning rate in the middle of learning. A scheduler is a setting for how to change the learning rate.",
                "nullable": true
              },
              "lrSchedulerNumCycles": {
                "maximum": 4,
                "minimum": 1,
                "type": "integer",
                "description": "This option specifies how many cycles the scheduler runs during training. It is only used when \"cosine_with_restarts\" or \"polynomial\" is used as the scheduler.",
                "format": "int32",
                "default": 3
              },
              "networkDim": {
                "maximum": 256,
                "minimum": 1,
                "type": "integer",
                "description": "The larger the Dim setting, the more learning information can be stored, but the possibility of learning unnecessary information other than the learning target increases. A larger Dim also increases LoRA file size.",
                "format": "int32",
                "nullable": true
              },
              "networkAlpha": {
                "maximum": 256,
                "minimum": 1,
                "type": "integer",
                "description": "The smaller the Network alpha value, the larger the stored LoRA neural net weights.\r\nFor example, with an Alpha of 16 and a Dim of 32, the strength of the weight used is 16/32 = 0.5,\r\nmeaning that the learning rate is only half as powerful as the Learning Rate setting.\r\n            \r\nIf Alpha and Dim are the same number, the strength used will be 1 and will have no effect on the learning rate.",
                "format": "int32",
                "nullable": true
              },
              "optimizerType": {
                "type": "string",
                "description": "The optimizer determines how to update the neural net weights during training.\r\nVarious methods have been proposed for smart learning, but the most commonly used in LoRA learning\r\nis \"AdamW8bit\" or \"Adafactor\" for SDXL.",
                "nullable": true
              },
              "targetSteps": {
                "type": "integer",
                "format": "int32",
                "nullable": true,
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "musubi"
            ],
            "type": "string"
          }
        }
      },
      "NSFWLevel": {
        "enum": [
          "pg",
          "pG13",
          "r",
          "x",
          "xxx",
          "na"
        ],
        "type": "string"
      },
      "OpenAIDallE2CreateImageGenInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAIDallE2ImageGenInput"
          },
          {
            "type": "object",
            "properties": {
              "background": {
                "enum": [
                  "auto",
                  "transparent",
                  "opaque"
                ],
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "createImage"
            ],
            "type": "string"
          }
        }
      },
      "OpenAIDallE2EditImageInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAIDallE2ImageGenInput"
          },
          {
            "required": [
              "image"
            ],
            "type": "object",
            "properties": {
              "image": {
                "type": "string",
                "description": "Either A URL, A DataURL or a Base64 string"
              },
              "mask": {
                "type": "string",
                "description": "Either A URL, A DataURL or a Base64 string",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "editImage"
            ],
            "type": "string"
          }
        }
      },
      "OpenAIDallE2ImageGenInput": {
        "required": [
          "model"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenApiImageGenInput"
          },
          {
            "required": [
              "operation",
              "prompt",
              "size"
            ],
            "type": "object",
            "properties": {
              "operation": {
                "type": "string"
              },
              "prompt": {
                "maxLength": 1000,
                "minLength": 0,
                "type": "string"
              },
              "size": {
                "enum": [
                  "256x256",
                  "512x512",
                  "1024x1024"
                ],
                "type": "string"
              },
              "quantity": {
                "maximum": 10,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "operation",
              "mapping": {
                "createImage": "#/components/schemas/OpenAIDallE2CreateImageGenInput",
                "editImage": "#/components/schemas/OpenAIDallE2EditImageInput"
              }
            }
          }
        ],
        "properties": {
          "model": {
            "enum": [
              "dall-e-2"
            ],
            "type": "string"
          }
        }
      },
      "OpenAIDallE3CreateImageGenInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAIDallE3ImageGenInput"
          },
          {
            "type": "object",
            "properties": {
              "background": {
                "enum": [
                  "auto",
                  "transparent",
                  "opaque"
                ],
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "createImage"
            ],
            "type": "string"
          }
        }
      },
      "OpenAIDallE3ImageGenInput": {
        "required": [
          "model"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenApiImageGenInput"
          },
          {
            "required": [
              "operation",
              "prompt",
              "size"
            ],
            "type": "object",
            "properties": {
              "operation": {
                "type": "string"
              },
              "prompt": {
                "maxLength": 4000,
                "minLength": 0,
                "type": "string"
              },
              "size": {
                "enum": [
                  "1024x1024",
                  "1792x1024",
                  "1024x1792"
                ],
                "type": "string"
              },
              "style": {
                "enum": [
                  "natural",
                  "vivid"
                ],
                "type": "string"
              },
              "quality": {
                "enum": [
                  "auto",
                  "hd",
                  "standard"
                ],
                "type": "string"
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "operation",
              "mapping": {
                "createImage": "#/components/schemas/OpenAIDallE3CreateImageGenInput"
              }
            }
          }
        ],
        "properties": {
          "model": {
            "enum": [
              "dall-e-3"
            ],
            "type": "string"
          }
        }
      },
      "OpenAIGpt1CreateImageInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAIGpt1ImageGenInput"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "createImage"
            ],
            "type": "string"
          }
        }
      },
      "OpenAIGpt1EditImageInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAIGpt1ImageGenInput"
          },
          {
            "required": [
              "images"
            ],
            "type": "object",
            "properties": {
              "images": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Either A URL, A DataURL or a Base64 string"
                }
              },
              "mask": {
                "type": "string",
                "description": "Either A URL, A DataURL or a Base64 string",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "editImage"
            ],
            "type": "string"
          }
        }
      },
      "OpenAIGpt1ImageGenInput": {
        "required": [
          "model"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenApiImageGenInput"
          },
          {
            "required": [
              "operation",
              "prompt"
            ],
            "type": "object",
            "properties": {
              "operation": {
                "type": "string"
              },
              "prompt": {
                "maxLength": 32000,
                "minLength": 0,
                "type": "string"
              },
              "size": {
                "enum": [
                  "1024x1024",
                  "1536x1024",
                  "1024x1536"
                ],
                "type": "string"
              },
              "quantity": {
                "maximum": 10,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              },
              "background": {
                "enum": [
                  "auto",
                  "transparent",
                  "opaque"
                ],
                "type": "string"
              },
              "quality": {
                "enum": [
                  "auto",
                  "high",
                  "medium",
                  "low"
                ],
                "type": "string",
                "nullable": true
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "operation",
              "mapping": {
                "createImage": "#/components/schemas/OpenAIGpt1CreateImageInput",
                "editImage": "#/components/schemas/OpenAIGpt1EditImageInput"
              }
            }
          }
        ],
        "properties": {
          "model": {
            "enum": [
              "gpt-image-1"
            ],
            "type": "string"
          }
        }
      },
      "OpenApiImageGenInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageGenInput"
          },
          {
            "required": [
              "model",
              "prompt"
            ],
            "type": "object",
            "properties": {
              "model": {
                "type": "string"
              },
              "prompt": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "model",
              "mapping": {
                "gpt-image-1": "#/components/schemas/OpenAIGpt1ImageGenInput",
                "dall-e-2": "#/components/schemas/OpenAIDallE2ImageGenInput",
                "dall-e-3": "#/components/schemas/OpenAIDallE3ImageGenInput"
              }
            }
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "openai"
            ],
            "type": "string"
          }
        }
      },
      "Priority": {
        "enum": [
          "high",
          "normal",
          "low"
        ],
        "type": "string",
        "description": "Available options for priority."
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "Qwen20bCreateImageGenInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Qwen20bImageGenInput"
          },
          {
            "type": "object",
            "properties": {
              "width": {
                "maximum": 2048,
                "minimum": 64,
                "type": "integer",
                "format": "int32"
              },
              "height": {
                "maximum": 2048,
                "minimum": 64,
                "type": "integer",
                "format": "int32"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "createImage"
            ],
            "type": "string"
          }
        }
      },
      "Qwen20bEditImageGenInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Qwen20bImageGenInput"
          },
          {
            "required": [
              "image"
            ],
            "type": "object",
            "properties": {
              "image": {
                "type": "string",
                "description": "Either A URL, A DataURL or a Base64 string"
              },
              "denoise": {
                "maximum": 1,
                "minimum": 0,
                "type": "number",
                "format": "double"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "editImage"
            ],
            "type": "string"
          }
        }
      },
      "Qwen20bImageGenInput": {
        "required": [
          "model"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/QwenImageGenInput"
          },
          {
            "required": [
              "operation",
              "prompt"
            ],
            "type": "object",
            "properties": {
              "operation": {
                "type": "string"
              },
              "unet": {
                "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\/.=,]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
                "type": "string"
              },
              "prompt": {
                "maxLength": 10000,
                "minLength": 0,
                "type": "string"
              },
              "negativePrompt": {
                "maxLength": 10000,
                "minLength": 0,
                "type": "string",
                "nullable": true
              },
              "scheduler": {
                "$ref": "#/components/schemas/Scheduler"
              },
              "steps": {
                "maximum": 150,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              },
              "cfgScale": {
                "maximum": 30,
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "seed": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "quantity": {
                "maximum": 12,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "operation",
              "mapping": {
                "createImage": "#/components/schemas/Qwen20bCreateImageGenInput",
                "editImage": "#/components/schemas/Qwen20bEditImageGenInput"
              }
            }
          }
        ],
        "properties": {
          "model": {
            "enum": [
              "20b"
            ],
            "type": "string"
          }
        }
      },
      "QwenImageGenInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageGenInput"
          },
          {
            "required": [
              "model"
            ],
            "type": "object",
            "properties": {
              "model": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "model",
              "mapping": {
                "20b": "#/components/schemas/Qwen20bImageGenInput"
              }
            }
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "qwen"
            ],
            "type": "string"
          }
        }
      },
      "ResourceInfo": {
        "required": [
          "air",
          "downloadUrls",
          "hashes",
          "size"
        ],
        "type": "object",
        "properties": {
          "air": {
            "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\/.=,]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
            "type": "string",
            "description": "An AIR ID for the resource."
          },
          "size": {
            "type": "integer",
            "description": "The resource size in bytes.",
            "format": "int64"
          },
          "hashes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A collection of hashes."
          },
          "downloadUrls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "An array of download urls."
          },
          "resourceName": {
            "type": "string",
            "description": "The name of the resource.",
            "nullable": true
          },
          "versionName": {
            "type": "string",
            "description": "The name of the version.",
            "nullable": true
          },
          "invalidateAt": {
            "type": "string",
            "description": "The date time to invalidate at.",
            "format": "date-time",
            "nullable": true
          },
          "earlyAccessEndsAt": {
            "type": "string",
            "description": "A DateTime representing when early access for the resource ends.",
            "format": "date-time",
            "nullable": true
          },
          "checkPermission": {
            "type": "boolean",
            "description": "A bool indicating if permission is required to use this resource."
          },
          "canGenerate": {
            "type": "boolean",
            "description": "A bool indicating if generation is enabled for this resource."
          },
          "freeTrialLimit": {
            "type": "integer",
            "description": "An optional limit on the number of uses for this resource per user that has early acccess.",
            "format": "int32",
            "nullable": true
          },
          "requiresAuthorization": {
            "type": "boolean",
            "description": "Wether this resource requires authorization.",
            "nullable": true
          },
          "fileFormat": {
            "$ref": "#/components/schemas/FileFormat"
          },
          "hasMatureContentRestriction": {
            "type": "boolean",
            "description": "A boolean indicating whether this resource restricts mature content generation.\r\nIf resources with this restriction are used in generation, then generations will automatically be enforced to not generate mature content"
          },
          "popularityRank": {
            "type": "number",
            "description": "Get a rank between 0-1 on the popularity of the resource.",
            "format": "double",
            "nullable": true
          },
          "isFeatured": {
            "type": "boolean",
            "description": "Get wether this resource is featured",
            "nullable": true
          },
          "publishedAt": {
            "type": "string",
            "description": "The date at which this model got published",
            "format": "date-time",
            "nullable": true
          },
          "hasNSFWContentRestriction": {
            "type": "boolean",
            "description": "A boolean indicating whether this resource restricts to SFW content generation.\r\nNSFWContent covers X and AA whereas MatureContent includes R rated content."
          }
        },
        "additionalProperties": false,
        "description": "Details for a specific resource."
      },
      "Scheduler": {
        "enum": [
          "eulerA",
          "euler",
          "lms",
          "heun",
          "dpM2",
          "dpM2A",
          "dpM2SA",
          "dpM2M",
          "dpmsde",
          "dpmFast",
          "dpmAdaptive",
          "lmsKarras",
          "dpM2Karras",
          "dpM2AKarras",
          "dpM2SAKarras",
          "dpM2MKarras",
          "dpmsdeKarras",
          "ddim",
          "plms",
          "uniPC",
          "undefined",
          "lcm",
          "ddpm",
          "deis",
          "dpM3MSDE"
        ],
        "type": "string",
        "description": "The available options for schedulers used in image generation."
      },
      "SeedreamImageGenInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageGenInput"
          },
          {
            "required": [
              "prompt"
            ],
            "type": "object",
            "properties": {
              "prompt": {
                "minLength": 1,
                "type": "string"
              },
              "quantity": {
                "maximum": 12,
                "minimum": 1,
                "type": "integer",
                "format": "int32",
                "default": 1
              },
              "width": {
                "maximum": 2048,
                "minimum": 256,
                "type": "integer",
                "format": "int32",
                "default": 1024
              },
              "height": {
                "maximum": 2048,
                "minimum": 256,
                "type": "integer",
                "format": "int32",
                "default": 1024
              },
              "guidanceScale": {
                "maximum": 10,
                "minimum": 1,
                "type": "number",
                "format": "double",
                "default": 2.5
              },
              "seed": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "enableSafetyChecker": {
                "type": "boolean",
                "default": false
              },
              "version": {
                "$ref": "#/components/schemas/SeedreamVersion"
              },
              "images": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Either A URL, A DataURL or a Base64 string"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "seedream"
            ],
            "type": "string"
          }
        }
      },
      "SeedreamVersion": {
        "enum": [
          "v3",
          "v4"
        ],
        "type": "string"
      },
      "TextToImageInput": {
        "required": [
          "height",
          "prompt",
          "width"
        ],
        "type": "object",
        "properties": {
          "quantity": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The number of batches to run.",
            "format": "int32",
            "default": 1
          },
          "batchSize": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The size of each batch",
            "format": "int32",
            "default": 1
          },
          "model": {
            "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\/.=,]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
            "type": "string",
            "description": "The AIR of the checkpoint model to use for generation.",
            "default": "urn:air:sd1:checkpoint:civitai:4384@128713"
          },
          "additionalNetworks": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ImageJobNetworkParams"
            },
            "description": "Get or set a associative list of additional networks. Use the AIR of the network as the key."
          },
          "controlNets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageJobControlNet"
            },
            "description": "Get or set a associative list of ControlNets."
          },
          "prompt": {
            "type": "string",
            "description": "The provided text prompt."
          },
          "negativePrompt": {
            "type": "string",
            "description": "The provided negative text prompt.",
            "nullable": true
          },
          "scheduler": {
            "$ref": "#/components/schemas/Scheduler"
          },
          "steps": {
            "maximum": 150,
            "minimum": 1,
            "type": "integer",
            "description": "The number of steps for image generation.",
            "format": "int32",
            "default": 30
          },
          "cfgScale": {
            "maximum": 30,
            "minimum": 1,
            "type": "number",
            "description": "The CFG scale value for image generation.",
            "format": "double",
            "default": 7.5
          },
          "width": {
            "maximum": 4084,
            "minimum": 64,
            "type": "integer",
            "description": "The desired image width in pixels.",
            "format": "int32",
            "default": 512
          },
          "height": {
            "maximum": 4084,
            "minimum": 64,
            "type": "integer",
            "description": "The desired image height in pixels.",
            "format": "int32",
            "default": 512
          },
          "seed": {
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer",
            "description": "The seed to use in image generation. Defaults to a random value if left unpopulated.",
            "format": "int64"
          },
          "clipSkip": {
            "type": "integer",
            "description": "The clip skip value for image generation.",
            "format": "int32",
            "default": 2
          },
          "imageMetadata": {
            "type": "string",
            "description": "External metadata that will be stored with the image",
            "nullable": true
          },
          "engine": {
            "type": "string",
            "description": "An optional engine to use for generation.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Input for an text to image step."
      },
      "TextToImageOutput": {
        "required": [
          "images"
        ],
        "type": "object",
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageBlob"
            },
            "description": "A collection of output images."
          }
        },
        "additionalProperties": false,
        "description": "Represents the output of a TextToImage workflow step."
      },
      "TextToImageStep": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStep"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/TextToImageInput"
              },
              "output": {
                "$ref": "#/components/schemas/TextToImageOutput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "textToImage"
            ],
            "type": "string"
          }
        },
        "description": "TextToImage"
      },
      "TextToImageStepTemplate": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStepTemplate"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/TextToImageInput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "textToImage"
            ],
            "type": "string"
          }
        },
        "description": "TextToImage"
      },
      "TransactionInfo": {
        "required": [
          "amount",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/TransactionType"
          },
          "amount": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The transaction amount.",
            "format": "int32"
          },
          "id": {
            "type": "string",
            "description": "The transaction ID.",
            "nullable": true
          },
          "accountType": {
            "$ref": "#/components/schemas/BuzzClientAccount"
          }
        },
        "additionalProperties": false,
        "description": "Transaction information."
      },
      "TransactionSummary": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionInfo"
            },
            "description": "Get a list of individual transactions."
          },
          "insufficientBuzz": {
            "type": "boolean",
            "description": "A boolean returned with whatif requests to indicate whether the user has nsufficient buzz to run a workflow.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionType": {
        "enum": [
          "debit",
          "credit"
        ],
        "type": "string"
      },
      "TranscodeInput": {
        "required": [
          "sourceUrl"
        ],
        "type": "object",
        "properties": {
          "sourceUrl": {
            "type": "string",
            "format": "uri"
          },
          "containerFormat": {
            "$ref": "#/components/schemas/ContainerFormat"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "destinationUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TranscodeOutput": {
        "required": [
          "available",
          "id",
          "jobId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets the id of the blob that contains the media."
          },
          "available": {
            "type": "boolean",
            "description": "Gets a value indicating whether the media is available."
          },
          "url": {
            "type": "string",
            "description": "Gets a url that can be used to preview the media.",
            "format": "uri",
            "nullable": true
          },
          "urlExpiresAt": {
            "type": "string",
            "description": "Get when the url is set to expire",
            "format": "date-time",
            "nullable": true
          },
          "jobId": {
            "type": "string",
            "description": "Get the id of the job that is associated with this media."
          }
        },
        "additionalProperties": false
      },
      "TranscodeStep": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStep"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/TranscodeInput"
              },
              "output": {
                "$ref": "#/components/schemas/TranscodeOutput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "transcode"
            ],
            "type": "string"
          }
        },
        "description": "Transcoding",
        "x-preview": true,
        "x-internal": true
      },
      "TryOnUInput": {
        "required": [
          "garmentUrl",
          "subjectUrl"
        ],
        "type": "object",
        "properties": {
          "subjectUrl": {
            "type": "string",
            "format": "uri"
          },
          "garmentUrl": {
            "type": "string",
            "format": "uri"
          },
          "subjectMaskUrl": {
            "type": "string",
            "format": "uri"
          },
          "subjectMaskBlobKey": {
            "type": "string"
          },
          "garmentDescription": {
            "type": "string"
          },
          "maskSubject": {
            "type": "boolean"
          },
          "cropSubject": {
            "type": "boolean"
          },
          "steps": {
            "type": "integer",
            "format": "int32"
          },
          "seed": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TryOnUOutput": {
        "required": [
          "blob"
        ],
        "type": "object",
        "properties": {
          "blob": {
            "$ref": "#/components/schemas/Blob"
          }
        },
        "additionalProperties": false
      },
      "UpdateWorkflowRequest": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/UpdateWorkflowStatus"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "description": "An optional set of new properties to set on the workflow.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An optional set of new tags to set on the workflow.",
            "nullable": true
          },
          "allowMatureContent": {
            "type": "boolean",
            "description": "Set to true to remove the mature content restriction on the workflow.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An request for updating a workflow."
      },
      "UpdateWorkflowStatus": {
        "enum": [
          "canceled"
        ],
        "type": "string",
        "description": "Available statuses for updating workflows."
      },
      "UpdateWorkflowStepRequest": {
        "required": [
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "description": "An set of new properties to set on the workflow step."
          }
        },
        "additionalProperties": false
      },
      "ValidationProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": {}
      },
      "ValueTupleOfStringAndInt32": {
        "type": "object",
        "additionalProperties": false
      },
      "Veo3AspectRatio": {
        "enum": [
          "16:9",
          "9:16",
          "1:1"
        ],
        "type": "string"
      },
      "Veo3VideoGenInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/VideoGenInput"
          },
          {
            "type": "object",
            "properties": {
              "negativePrompt": {
                "type": "string",
                "nullable": true
              },
              "enablePromptEnhancer": {
                "type": "boolean"
              },
              "aspectRatio": {
                "$ref": "#/components/schemas/Veo3AspectRatio"
              },
              "duration": {
                "type": "integer",
                "format": "int32",
                "default": 8
              },
              "generateAudio": {
                "type": "boolean"
              },
              "seed": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "fastMode": {
                "type": "boolean"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Either A URL, A DataURL or a Base64 string"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "veo3"
            ],
            "type": "string"
          }
        }
      },
      "VideoBlob": {
        "required": [
          "type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Blob"
          },
          {
            "type": "object",
            "properties": {
              "width": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "height": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "type": {
            "enum": [
              "video"
            ],
            "type": "string"
          }
        }
      },
      "VideoEnhancementInput": {
        "required": [
          "sourceUrl"
        ],
        "type": "object",
        "properties": {
          "sourceUrl": {
            "type": "string",
            "format": "uri"
          },
          "upscaler": {
            "$ref": "#/components/schemas/VideoEnhancementInputUpscalerOptions"
          },
          "interpolation": {
            "$ref": "#/components/schemas/VideoEnhancementInputInterpolationOptions"
          }
        },
        "additionalProperties": false
      },
      "VideoEnhancementInputInterpolationOptions": {
        "required": [
          "multiplier"
        ],
        "type": "object",
        "properties": {
          "multiplier": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "VideoEnhancementInputUpscalerOptions": {
        "required": [
          "height",
          "width"
        ],
        "type": "object",
        "properties": {
          "model": {
            "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\/.=,]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
            "type": "string",
            "nullable": true
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "VideoEnhancementOutput": {
        "required": [
          "video"
        ],
        "type": "object",
        "properties": {
          "video": {
            "$ref": "#/components/schemas/VideoBlob"
          }
        },
        "additionalProperties": false
      },
      "VideoEnhancementStep": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStep"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/VideoEnhancementInput"
              },
              "output": {
                "$ref": "#/components/schemas/VideoEnhancementOutput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "videoEnhancement"
            ],
            "type": "string"
          }
        },
        "description": "Upscale videos and/or interpolate frames"
      },
      "VideoEnhancementStepTemplate": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStepTemplate"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/VideoEnhancementInput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "videoEnhancement"
            ],
            "type": "string"
          }
        },
        "description": "Upscale videos and/or interpolate frames"
      },
      "VideoGenInput": {
        "required": [
          "engine",
          "prompt"
        ],
        "type": "object",
        "properties": {
          "engine": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "engine",
          "mapping": {
            "haiper": "#/components/schemas/HaiperVideoGenInput",
            "mochi": "#/components/schemas/MochiVideoGenInput",
            "kling": "#/components/schemas/KlingVideoGenInput",
            "minimax": "#/components/schemas/MiniMaxVideoGenInput",
            "lightricks": "#/components/schemas/LightricksVideoGenInput",
            "hunyuan": "#/components/schemas/HunyuanVdeoGenInput",
            "wan": "#/components/schemas/WanVideoGenInput",
            "vidu": "#/components/schemas/ViduVideoGenInput",
            "veo3": "#/components/schemas/Veo3VideoGenInput"
          }
        }
      },
      "VideoGenInputLora": {
        "required": [
          "air",
          "strength"
        ],
        "type": "object",
        "properties": {
          "air": {
            "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\/.=,]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
            "type": "string"
          },
          "strength": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "VideoGenOutput": {
        "type": "object",
        "properties": {
          "video": {
            "$ref": "#/components/schemas/VideoBlob"
          }
        },
        "additionalProperties": false
      },
      "VideoGenStep": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStep"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/VideoGenInput"
              },
              "output": {
                "$ref": "#/components/schemas/VideoGenOutput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "videoGen"
            ],
            "type": "string"
          }
        },
        "description": "Video generation"
      },
      "VideoGenStepTemplate": {
        "required": [
          "$type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStepTemplate"
          },
          {
            "required": [
              "input"
            ],
            "type": "object",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/VideoGenInput"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "$type": {
            "enum": [
              "videoGen"
            ],
            "type": "string"
          }
        },
        "description": "Video generation"
      },
      "ViduVideoGenInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/VideoGenInput"
          },
          {
            "type": "object",
            "properties": {
              "enablePromptEnhancer": {
                "type": "boolean",
                "default": true
              },
              "seed": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "sourceImage": {
                "type": "string",
                "description": "Either A URL, A DataURL or a Base64 string",
                "nullable": true
              },
              "style": {
                "$ref": "#/components/schemas/ViduVideoGenStyle"
              },
              "duration": {
                "enum": [
                  4,
                  8
                ],
                "type": "integer",
                "format": "int32",
                "default": 4
              },
              "endSourceImage": {
                "type": "string",
                "description": "Either A URL, A DataURL or a Base64 string",
                "nullable": true
              },
              "model": {
                "$ref": "#/components/schemas/ViduVideoGenModel"
              },
              "aspectRatio": {
                "enum": [
                  "16:9",
                  "9:16",
                  "1:1"
                ],
                "type": "string",
                "nullable": true
              },
              "movementAmplitude": {
                "enum": [
                  "auto",
                  "small",
                  "medium",
                  "large"
                ],
                "type": "string",
                "nullable": true
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Either A URL, A DataURL or a Base64 string"
                }
              },
              "enableBackgroundMusic": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "vidu"
            ],
            "type": "string"
          }
        }
      },
      "ViduVideoGenModel": {
        "enum": [
          "default",
          "q1"
        ],
        "type": "string"
      },
      "ViduVideoGenStyle": {
        "enum": [
          "general",
          "anime"
        ],
        "type": "string"
      },
      "Wan21CivitaiVideoGenInput": {
        "required": [
          "provider"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Wan21VideoGenInput"
          },
          {
            "type": "object",
            "properties": {
              "width": {
                "type": "integer",
                "format": "int32"
              },
              "height": {
                "type": "integer",
                "format": "int32"
              },
              "model": {
                "pattern": "^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_\\-\\/]+):)?(?:(?<type>[a-zA-Z0-9_\\-\\/]+):)?(?<source>[a-zA-Z0-9_\\-\\/]+):(?<id>[a-zA-Z0-9_\\-\\/\\.]+)(?:@(?<version>[a-zA-Z0-9_\\-\\/.=,]+))?(?:\\.(?<format>[a-zA-Z0-9_\\-]+))?$",
                "type": "string",
                "nullable": true
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Either A URL, A DataURL or a Base64 string"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "provider": {
            "enum": [
              "civitai"
            ],
            "type": "string"
          }
        }
      },
      "Wan21FalVideoGenInput": {
        "required": [
          "provider"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Wan21VideoGenInput"
          },
          {
            "type": "object",
            "properties": {
              "aspectRatio": {
                "enum": [
                  "1:1",
                  "16:9",
                  "9:16"
                ],
                "type": "string",
                "default": "16:9"
              },
              "enablePromptExpansion": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "provider": {
            "enum": [
              "fal"
            ],
            "type": "string"
          }
        }
      },
      "Wan21VideoGenInput": {
        "required": [
          "version"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WanVideoGenInput"
          },
          {
            "required": [
              "provider"
            ],
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "default": "civitai",
                "nullable": true
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "provider",
              "mapping": {
                "civitai": "#/components/schemas/Wan21CivitaiVideoGenInput",
                "fal": "#/components/schemas/Wan21FalVideoGenInput"
              }
            }
          }
        ],
        "properties": {
          "version": {
            "enum": [
              "v2.1"
            ],
            "type": "string"
          }
        }
      },
      "Wan225bFalImageGenInput": {
        "required": [
          "provider"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Wan225bImageGenInput"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "provider": {
            "enum": [
              "fal"
            ],
            "type": "string"
          }
        }
      },
      "Wan225bFalImageToVideoInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Wan225bFalVideoGenInput"
          },
          {
            "type": "object",
            "properties": {
              "images": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Either A URL, A DataURL or a Base64 string"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "image-to-video"
            ],
            "type": "string"
          }
        }
      },
      "Wan225bFalTextToVideoInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Wan225bFalVideoGenInput"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "text-to-video"
            ],
            "type": "string"
          }
        }
      },
      "Wan225bFalVideoGenInput": {
        "required": [
          "provider"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Wan225bVideoGenInput"
          },
          {
            "required": [
              "operation"
            ],
            "type": "object",
            "properties": {
              "operation": {
                "type": "string",
                "default": "text-to-video",
                "nullable": true
              },
              "resolution": {
                "enum": [
                  "480p",
                  "580p",
                  "720p"
                ],
                "type": "string",
                "default": "720p"
              },
              "aspectRatio": {
                "enum": [
                  "1:1",
                  "16:9",
                  "9:16",
                  "auto"
                ],
                "type": "string",
                "default": "16:9"
              },
              "enablePromptExpansion": {
                "type": "boolean",
                "default": false
              },
              "useDistill": {
                "type": "boolean",
                "default": false
              },
              "useFastWan": {
                "type": "boolean",
                "default": false
              },
              "interpolatorModel": {
                "enum": [
                  "none",
                  "film",
                  "rife"
                ],
                "type": "string",
                "default": "film"
              },
              "negativePrompt": {
                "type": "string",
                "nullable": true
              },
              "enableSafetyChecker": {
                "type": "boolean",
                "default": false
              },
              "numInferenceSteps": {
                "maximum": 50,
                "minimum": 2,
                "type": "integer",
                "format": "int32",
                "default": 20
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "operation",
              "mapping": {
                "text-to-video": "#/components/schemas/Wan225bFalTextToVideoInput",
                "image-to-video": "#/components/schemas/Wan225bFalImageToVideoInput"
              }
            }
          }
        ],
        "properties": {
          "provider": {
            "enum": [
              "fal"
            ],
            "type": "string"
          }
        }
      },
      "Wan225bImageGenInput": {
        "required": [
          "version"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WanImageGenInput"
          },
          {
            "required": [
              "provider"
            ],
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "default": "fal",
                "nullable": true
              },
              "steps": {
                "maximum": 50,
                "minimum": 2,
                "type": "integer",
                "format": "int32",
                "default": 40
              },
              "shift": {
                "maximum": 10,
                "minimum": 1,
                "type": "number",
                "format": "double",
                "default": 2
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "provider",
              "mapping": {
                "fal": "#/components/schemas/Wan225bFalImageGenInput"
              }
            }
          }
        ],
        "properties": {
          "version": {
            "enum": [
              "v2.2-5b"
            ],
            "type": "string"
          }
        }
      },
      "Wan225bVideoGenInput": {
        "required": [
          "version"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WanVideoGenInput"
          },
          {
            "required": [
              "provider"
            ],
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "default": "fal",
                "nullable": true
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "provider",
              "mapping": {
                "fal": "#/components/schemas/Wan225bFalVideoGenInput"
              }
            }
          }
        ],
        "properties": {
          "version": {
            "enum": [
              "v2.2-5b"
            ],
            "type": "string"
          }
        }
      },
      "Wan22FalImageGenInput": {
        "required": [
          "provider"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Wan22ImageGenInput"
          },
          {
            "type": "object",
            "properties": {
              "acceleration": {
                "enum": [
                  "none",
                  "fast",
                  "faster"
                ],
                "type": "string",
                "default": "none"
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "provider": {
            "enum": [
              "fal"
            ],
            "type": "string"
          }
        }
      },
      "Wan22FalImageToVideoInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Wan22FalVideoGenInput"
          },
          {
            "type": "object",
            "properties": {
              "images": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Either A URL, A DataURL or a Base64 string"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "image-to-video"
            ],
            "type": "string"
          }
        }
      },
      "Wan22FalTextToVideoInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Wan22FalVideoGenInput"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "text-to-video"
            ],
            "type": "string"
          }
        }
      },
      "Wan22FalVideoGenInput": {
        "required": [
          "provider"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Wan22VideoGenInput"
          },
          {
            "required": [
              "operation"
            ],
            "type": "object",
            "properties": {
              "operation": {
                "type": "string",
                "default": "text-to-video",
                "nullable": true
              },
              "resolution": {
                "enum": [
                  "480p",
                  "720p"
                ],
                "type": "string",
                "default": "720p"
              },
              "aspectRatio": {
                "enum": [
                  "1:1",
                  "16:9",
                  "9:16",
                  "4:3",
                  "3:4",
                  "4:5",
                  "5:4"
                ],
                "type": "string",
                "default": "16:9"
              },
              "enablePromptExpansion": {
                "type": "boolean",
                "default": false
              },
              "shift": {
                "maximum": 10,
                "minimum": 1,
                "type": "number",
                "format": "double",
                "default": 5
              },
              "interpolatorModel": {
                "enum": [
                  "film",
                  "rife"
                ],
                "type": "string",
                "default": "film"
              },
              "useTurbo": {
                "type": "boolean",
                "default": false
              },
              "negativePrompt": {
                "type": "string",
                "nullable": true
              },
              "enableSafetyChecker": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "operation",
              "mapping": {
                "text-to-video": "#/components/schemas/Wan22FalTextToVideoInput",
                "image-to-video": "#/components/schemas/Wan22FalImageToVideoInput"
              }
            }
          }
        ],
        "properties": {
          "provider": {
            "enum": [
              "fal"
            ],
            "type": "string"
          }
        }
      },
      "Wan22ImageGenInput": {
        "required": [
          "version"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WanImageGenInput"
          },
          {
            "required": [
              "provider"
            ],
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "default": "fal",
                "nullable": true
              },
              "steps": {
                "maximum": 40,
                "minimum": 2,
                "type": "integer",
                "format": "int32",
                "default": 27
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "provider",
              "mapping": {
                "fal": "#/components/schemas/Wan22FalImageGenInput"
              }
            }
          }
        ],
        "properties": {
          "version": {
            "enum": [
              "v2.2"
            ],
            "type": "string"
          }
        }
      },
      "Wan22VideoGenInput": {
        "required": [
          "version"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WanVideoGenInput"
          },
          {
            "required": [
              "provider"
            ],
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "default": "fal",
                "nullable": true
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "provider",
              "mapping": {
                "fal": "#/components/schemas/Wan22FalVideoGenInput"
              }
            }
          }
        ],
        "properties": {
          "version": {
            "enum": [
              "v2.2"
            ],
            "type": "string"
          }
        }
      },
      "Wan25FalImageGenInput": {
        "required": [
          "provider"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Wan25ImageGenInput"
          },
          {
            "required": [
              "operation"
            ],
            "type": "object",
            "properties": {
              "operation": {
                "type": "string",
                "default": "text-to-image",
                "nullable": true
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "operation",
              "mapping": {
                "text-to-image": "#/components/schemas/Wan25FalTextToImageInput",
                "image-to-image": "#/components/schemas/Wan25FalImageToImageInput"
              }
            }
          }
        ],
        "properties": {
          "provider": {
            "enum": [
              "fal"
            ],
            "type": "string"
          }
        }
      },
      "Wan25FalImageToImageInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Wan25FalImageGenInput"
          },
          {
            "type": "object",
            "properties": {
              "images": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Either A URL, A DataURL or a Base64 string"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "image-to-image"
            ],
            "type": "string"
          }
        }
      },
      "Wan25FalImageToVideoInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Wan25FalVideoGenInput"
          },
          {
            "type": "object",
            "properties": {
              "images": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Either A URL, A DataURL or a Base64 string"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "image-to-video"
            ],
            "type": "string"
          }
        }
      },
      "Wan25FalTextToImageInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Wan25FalImageGenInput"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "text-to-image"
            ],
            "type": "string"
          }
        }
      },
      "Wan25FalTextToVideoInput": {
        "required": [
          "operation"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Wan25FalVideoGenInput"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "operation": {
            "enum": [
              "text-to-video"
            ],
            "type": "string"
          }
        }
      },
      "Wan25FalVideoGenInput": {
        "required": [
          "provider"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Wan25VideoGenInput"
          },
          {
            "required": [
              "operation"
            ],
            "type": "object",
            "properties": {
              "operation": {
                "type": "string",
                "default": "text-to-video",
                "nullable": true
              },
              "resolution": {
                "enum": [
                  "480p",
                  "720p",
                  "1080p"
                ],
                "type": "string",
                "default": "1080p"
              },
              "aspectRatio": {
                "enum": [
                  "16:9",
                  "9:16",
                  "1:1"
                ],
                "type": "string",
                "default": "16:9"
              },
              "enablePromptExpansion": {
                "type": "boolean",
                "default": true
              },
              "negativePrompt": {
                "type": "string",
                "nullable": true
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "operation",
              "mapping": {
                "text-to-video": "#/components/schemas/Wan25FalTextToVideoInput",
                "image-to-video": "#/components/schemas/Wan25FalImageToVideoInput"
              }
            }
          }
        ],
        "properties": {
          "provider": {
            "enum": [
              "fal"
            ],
            "type": "string"
          }
        }
      },
      "Wan25ImageGenInput": {
        "required": [
          "version"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WanImageGenInput"
          },
          {
            "required": [
              "provider"
            ],
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "default": "fal",
                "nullable": true
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "provider",
              "mapping": {
                "fal": "#/components/schemas/Wan25FalImageGenInput"
              }
            }
          }
        ],
        "properties": {
          "version": {
            "enum": [
              "v2.5"
            ],
            "type": "string"
          }
        }
      },
      "Wan25VideoGenInput": {
        "required": [
          "version"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/WanVideoGenInput"
          },
          {
            "required": [
              "provider"
            ],
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "default": "fal",
                "nullable": true
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "provider",
              "mapping": {
                "fal": "#/components/schemas/Wan25FalVideoGenInput"
              }
            }
          }
        ],
        "properties": {
          "version": {
            "enum": [
              "v2.5"
            ],
            "type": "string"
          }
        }
      },
      "WanImageGenInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageGenInput"
          },
          {
            "required": [
              "prompt",
              "version"
            ],
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "v2.2",
                "nullable": true
              },
              "prompt": {
                "minLength": 1,
                "type": "string"
              },
              "negativePrompt": {
                "type": "string",
                "nullable": true
              },
              "guidanceScale": {
                "maximum": 10,
                "minimum": 1,
                "type": "number",
                "format": "double",
                "default": 3.5
              },
              "seed": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "quantity": {
                "maximum": 10,
                "minimum": 1,
                "type": "integer",
                "format": "int32",
                "default": 1
              },
              "imageSize": {
                "type": "string",
                "default": "square_hd"
              },
              "enablePromptExpansion": {
                "type": "boolean",
                "default": false
              },
              "enableSafetyChecker": {
                "type": "boolean",
                "default": false
              },
              "loras": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImageGenInputLora"
                }
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "version",
              "mapping": {
                "v2.2": "#/components/schemas/Wan22ImageGenInput",
                "v2.2-5b": "#/components/schemas/Wan225bImageGenInput",
                "v2.5": "#/components/schemas/Wan25ImageGenInput"
              }
            }
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "wan"
            ],
            "type": "string"
          }
        }
      },
      "WanVideoGenInput": {
        "required": [
          "engine"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/VideoGenInput"
          },
          {
            "required": [
              "version"
            ],
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "v2.1",
                "nullable": true
              },
              "sourceImage": {
                "type": "string",
                "description": "Either A URL, A DataURL or a Base64 string",
                "nullable": true
              },
              "cfgScale": {
                "maximum": 100,
                "minimum": 0,
                "type": "number",
                "format": "double",
                "default": 4
              },
              "frameRate": {
                "type": "integer",
                "format": "int32",
                "default": 24
              },
              "duration": {
                "maximum": 30,
                "minimum": 1,
                "type": "integer",
                "format": "int32",
                "default": 5
              },
              "seed": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "steps": {
                "maximum": 50,
                "minimum": 10,
                "type": "integer",
                "format": "int32",
                "default": 20
              },
              "loras": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VideoGenInputLora"
                }
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "version",
              "mapping": {
                "v2.1": "#/components/schemas/Wan21VideoGenInput",
                "v2.2": "#/components/schemas/Wan22VideoGenInput",
                "v2.2-5b": "#/components/schemas/Wan225bVideoGenInput",
                "v2.5": "#/components/schemas/Wan25VideoGenInput"
              }
            }
          }
        ],
        "properties": {
          "engine": {
            "enum": [
              "wan"
            ],
            "type": "string"
          }
        }
      },
      "Workflow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the workflow.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "The date / time the workflow was created.",
            "format": "date-time"
          },
          "transactions": {
            "$ref": "#/components/schemas/TransactionSummary"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "description": "A collection of user defined metadata for the workflow."
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          },
          "startedAt": {
            "type": "string",
            "description": "The date / time the workflow was started. Null if not yet started.",
            "format": "date-time",
            "nullable": true
          },
          "completedAt": {
            "type": "string",
            "description": "The date / time the workflow was completed. Null if not yet complete.",
            "format": "date-time",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An optional list of tags for the workflow."
          },
          "arguments": {
            "type": "object",
            "additionalProperties": {},
            "description": "Get an associated collection of arguments"
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowStep"
            },
            "description": "The steps for the workflow."
          },
          "callbacks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowCallback"
            },
            "description": "An array of callback details for the workflow."
          },
          "tips": {
            "$ref": "#/components/schemas/WorkflowTips"
          },
          "cost": {
            "$ref": "#/components/schemas/WorkflowCost"
          },
          "nsfwLevel": {
            "$ref": "#/components/schemas/NSFWLevel"
          },
          "experimental": {
            "type": "boolean",
            "description": "Get or set whether this workflow is experimental",
            "nullable": true
          },
          "allowMatureContent": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether mature content is allowed in this workflow.",
            "nullable": true
          },
          "upgradeMode": {
            "$ref": "#/components/schemas/WorkflowUpgradeMode"
          }
        },
        "additionalProperties": false,
        "description": "Details of a workflow."
      },
      "WorkflowCallback": {
        "required": [
          "type",
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The url for the callback.",
            "format": "uri"
          },
          "type": {
            "type": "array",
            "items": {
              "enum": [
                "workflow:*",
                "workflow:unassigned",
                "workflow:processing",
                "workflow:succeeded",
                "workflow:failed",
                "workflow:expired",
                "workflow:canceled",
                "step:*",
                "step:unassigned",
                "step:processing",
                "step:succeeded",
                "step:failed",
                "step:expired",
                "step:canceled",
                "job:*",
                "job:unassigned",
                "job:processing",
                "job:succeeded",
                "job:failed",
                "job:expired",
                "job:canceled"
              ],
              "type": "string",
              "example": "workflow:succeeded"
            },
            "description": "An array of event types to send to the callback."
          }
        },
        "additionalProperties": false,
        "description": "Details of a callback setup for a workflow."
      },
      "WorkflowCost": {
        "type": "object",
        "properties": {
          "base": {
            "type": "integer",
            "description": "The base cost of this request, excludsing any tips",
            "format": "int32"
          },
          "factors": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "description": "A breakdown of the cost factors for this request",
            "nullable": true
          },
          "fixed": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A fixed set of cost additions for this request",
            "nullable": true
          },
          "tips": {
            "$ref": "#/components/schemas/WorkflowCostTips"
          },
          "total": {
            "type": "integer",
            "description": "The total cost of this request, including tips",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "WorkflowCostTips": {
        "required": [
          "civitai",
          "creators"
        ],
        "type": "object",
        "properties": {
          "civitai": {
            "type": "integer",
            "description": "The buzz tipped to Civitai",
            "format": "int32"
          },
          "creators": {
            "type": "integer",
            "description": "The buzz tipped to the Creators who's resources were used",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Get the cost of tips"
      },
      "WorkflowEvent": {
        "required": [
          "status",
          "workflowId"
        ],
        "type": "object",
        "properties": {
          "workflowId": {
            "type": "string",
            "description": "The ID that represents the corresponding workflow."
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          },
          "timestamp": {
            "type": "string",
            "description": "A timestamp for when this event got raised",
            "format": "date-time"
          },
          "$type": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Details of a workflow event."
      },
      "WorkflowStatus": {
        "enum": [
          "unassigned",
          "preparing",
          "scheduled",
          "processing",
          "succeeded",
          "failed",
          "expired",
          "canceled"
        ],
        "type": "string",
        "description": "Values available to represent workflow status."
      },
      "WorkflowStep": {
        "required": [
          "$type",
          "name"
        ],
        "type": "object",
        "properties": {
          "$type": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "The name of the workflow step. Used to allow steps to refer to one another."
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "timeout": {
            "type": "string",
            "description": "The maximum time to wait for this step to complete.",
            "format": "date-span",
            "nullable": true
          },
          "retries": {
            "type": "integer",
            "description": "The maximum number of times this step should be retried.",
            "format": "int32",
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowStepJob"
            },
            "description": "The jobs generated by this step.",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          },
          "startedAt": {
            "type": "string",
            "description": "The date / time the step was started. Null if not yet started.",
            "format": "date-time",
            "nullable": true
          },
          "completedAt": {
            "type": "string",
            "description": "The date / time the step was completed. Null if not yet completed.",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "description": "A collection of user defined metadata for the workflow step."
          },
          "estimatedProgressRate": {
            "type": "number",
            "description": "An estimation on the current progression of this step, or null if there is no estimation",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details of a workflow step.",
        "discriminator": {
          "propertyName": "$type",
          "mapping": {
            "ageClassification": "#/components/schemas/AgeClassificationStep",
            "comfy": "#/components/schemas/ComfyStep",
            "echo": "#/components/schemas/EchoStep",
            "imageGen": "#/components/schemas/ImageGenStep",
            "imageResourceTraining": "#/components/schemas/ImageResourceTrainingStep",
            "imageUpload": "#/components/schemas/ImageUploadStep",
            "textToImage": "#/components/schemas/TextToImageStep",
            "transcode": "#/components/schemas/TranscodeStep",
            "videoEnhancement": "#/components/schemas/VideoEnhancementStep",
            "videoGen": "#/components/schemas/VideoGenStep"
          }
        }
      },
      "WorkflowStepEvent": {
        "required": [
          "status",
          "stepName",
          "workflowId"
        ],
        "type": "object",
        "properties": {
          "workflowId": {
            "type": "string",
            "description": "The workflow ID."
          },
          "stepName": {
            "type": "string",
            "description": "The workflow step's name."
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          },
          "$type": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Details of a workflow step event."
      },
      "WorkflowStepJob": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The job's ID."
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          },
          "startedAt": {
            "type": "string",
            "description": "The date / time the job started. Null if not yet started.",
            "format": "date-time",
            "nullable": true
          },
          "completedAt": {
            "type": "string",
            "description": "The date / time the job completed. Null if not yet completed.",
            "format": "date-time",
            "nullable": true
          },
          "queuePosition": {
            "$ref": "#/components/schemas/WorkflowStepJobQueuePosition"
          },
          "cost": {
            "type": "number",
            "description": "The job's cost.",
            "format": "double"
          },
          "estimatedProgressRate": {
            "type": "number",
            "description": "An estimation on the current progression of this job, or null if there is no estimation",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details of a job produced by a workflow step."
      },
      "WorkflowStepJobEvent": {
        "required": [
          "jobId",
          "status",
          "stepName",
          "workflowId"
        ],
        "type": "object",
        "properties": {
          "workflowId": {
            "type": "string",
            "description": "The workflow ID."
          },
          "stepName": {
            "type": "string",
            "description": "The step's name."
          },
          "jobId": {
            "type": "string",
            "description": "The job's ID."
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          },
          "$type": {
            "type": "string"
          },
          "progress": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "blockedReason": {
            "type": "string",
            "nullable": true
          },
          "matureContent": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details of a workflow step job event."
      },
      "WorkflowStepJobQueuePosition": {
        "required": [
          "support"
        ],
        "type": "object",
        "properties": {
          "support": {
            "$ref": "#/components/schemas/JobSupport"
          },
          "precedingJobs": {
            "type": "integer",
            "description": "The number of preceding jobs in the queue.",
            "format": "int32",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "description": "An estimated date / time for when the job will start.",
            "format": "date-time",
            "nullable": true
          },
          "completeAt": {
            "type": "string",
            "description": "An estimated date / time for when the job will complete.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details of the workflow step job's queue position."
      },
      "WorkflowStepTemplate": {
        "required": [
          "$type"
        ],
        "type": "object",
        "properties": {
          "$type": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "The name of the workflow step. Used to allow steps to refer to one another.",
            "nullable": true
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "timeout": {
            "type": "string",
            "description": "The maximum time to wait for this step to complete.",
            "format": "date-span",
            "nullable": true
          },
          "retries": {
            "type": "integer",
            "description": "The maximum number of times this step should be retried.",
            "format": "int32",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "description": "A collection of user defined metadata for the workflow step.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details of a workflow step template.",
        "discriminator": {
          "propertyName": "$type",
          "mapping": {
            "ageClassification": "#/components/schemas/AgeClassificationStepTemplate",
            "comfy": "#/components/schemas/ComfyStepTemplate",
            "echo": "#/components/schemas/EchoStepTemplate",
            "imageGen": "#/components/schemas/ImageGenStepTemplate",
            "imageResourceTraining": "#/components/schemas/ImageResourceTrainingStepTemplate",
            "imageUpload": "#/components/schemas/ImageUploadStepTemplate",
            "textToImage": "#/components/schemas/TextToImageStepTemplate",
            "videoEnhancement": "#/components/schemas/VideoEnhancementStepTemplate",
            "videoGen": "#/components/schemas/VideoGenStepTemplate"
          }
        }
      },
      "WorkflowTemplate": {
        "required": [
          "steps"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "description": "A collection of user defined metadata that can be used to store additional information about the workflow.",
            "nullable": true
          },
          "tags": {
            "maxItems": 10,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of tags associated with this workflow.\r\nTags are indexed and can be used to search for workflows.\r\nAt most 10 tags can be assigned to a workflow. Each tag can be at most 200 characters long.",
            "nullable": true
          },
          "steps": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowStepTemplate"
            },
            "description": "An array of steps that compose this workflow."
          },
          "callbacks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowCallback"
            },
            "description": "An array of callbacks to be triggered during the lifetime of the workflow.",
            "nullable": true
          },
          "tips": {
            "$ref": "#/components/schemas/WorkflowTips"
          },
          "arguments": {
            "type": "object",
            "additionalProperties": {},
            "description": "Get an associated collection of arguments",
            "nullable": true
          },
          "nsfwLevel": {
            "$ref": "#/components/schemas/NSFWLevel"
          },
          "experimental": {
            "type": "boolean",
            "description": "Get or set whether this workflow is experimental",
            "nullable": true
          },
          "allowMatureContent": {
            "type": "boolean",
            "description": "Get or set whether this workflow should allow mature content.\r\nWhen set to false, the workflow will not return any content that is marked as mature.\r\nAdditional payment options are available for workflows that do not allow mature content.",
            "nullable": true
          },
          "upgradeMode": {
            "$ref": "#/components/schemas/WorkflowUpgradeMode"
          }
        },
        "additionalProperties": false,
        "description": "Details of a requested workflow."
      },
      "WorkflowTips": {
        "required": [
          "civitai",
          "creators"
        ],
        "type": "object",
        "properties": {
          "civitai": {
            "type": "number",
            "description": "The rate of tipping that should be allocated to civitai",
            "format": "double"
          },
          "creators": {
            "type": "number",
            "description": "The rate of tipping that should be allocated to creators involved in this workflow",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "WorkflowUpgradeMode": {
        "enum": [
          "manual",
          "automatic"
        ],
        "type": "string",
        "description": "Specifies how a workflow should be upgraded when mature content is detected and green or blue buzz was used for payment."
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "http",
        "description": "Copy valid authorization token into field",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "ApiKey": []
    }
  ],
  "x-tagGroups": [
    {
      "name": "Resources",
      "tags": [
        "Resources"
      ]
    },
    {
      "name": "Consumer",
      "tags": [
        "Workflows",
        "Recipes",
        "Blobs"
      ]
    },
    {
      "name": "Provider",
      "tags": [
        "Providers",
        "Workers",
        "WorkerJobs",
        "Configurations"
      ]
    }
  ]
}