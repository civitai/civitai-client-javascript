// This file is auto-generated by @hey-api/openapi-ts

export const $ConfigurationOptions = {
  required: ['selector', 'spec'],
  type: 'object',
  properties: {
    priority: {
      type: 'integer',
      description:
        'Get or set the priority of this configuration if multiple configurations apply to the same worker',
      format: 'int64',
    },
    selector: {
      $ref: '#/components/schemas/Expression',
    },
    spec: {
      description: 'Get or set the specification associated with this configuration',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const $ConfigurationStatus = {
  required: ['configurationId'],
  type: 'object',
  properties: {
    configurationId: {
      minLength: 1,
      type: 'string',
    },
    assigned: {
      type: 'integer',
      format: 'int32',
    },
    targeted: {
      type: 'integer',
      format: 'int32',
    },
    applied: {
      type: 'integer',
      format: 'int32',
    },
  },
  additionalProperties: false,
} as const;

export const $ContainerFormat = {
  enum: ['mp4', 'webM'],
  type: 'string',
} as const;

export const $CreateConfigurationResult = {
  required: ['configurationId'],
  type: 'object',
  properties: {
    configurationId: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const $CreateWorkerResult = {
  required: ['workerId'],
  type: 'object',
  properties: {
    workerId: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const $CursedArrayOfTelemetryCursorAndWorkflow = {
  required: ['items', 'next'],
  type: 'object',
  properties: {
    next: {
      type: 'string',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Workflow',
      },
    },
  },
  additionalProperties: false,
} as const;

export const $DynamicAssignment = {
  required: ['fromPath', 'toPath'],
  type: 'object',
  properties: {
    fromPath: {
      minLength: 1,
      type: 'string',
    },
    toPath: {
      minLength: 1,
      type: 'string',
    },
    defaultValue: {
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const $EchoInput = {
  required: ['message'],
  type: 'object',
  properties: {
    message: {
      minLength: 1,
      type: 'string',
      description: 'The message to be returned in the output.',
    },
  },
  additionalProperties: false,
  description: 'Represents the input information needed for the Echo workflow step.',
} as const;

export const $EchoOutput = {
  required: ['message'],
  type: 'object',
  properties: {
    message: {
      minLength: 1,
      type: 'string',
      description: 'The message to be returned.',
    },
  },
  additionalProperties: false,
  description: 'Represents the output information returned from the Echo workflow step.',
} as const;

export const $EchoStep = {
  title: 'A workflow step that takes a message string and retuns it.',
  required: ['$type', 'input'],
  type: 'object',
  allOf: [
    {
      $ref: '#/components/schemas/WorkflowStep',
    },
  ],
  properties: {
    name: {
      type: 'string',
      description: 'The name of the workflow step. Used to allow steps to refer to one another.',
      nullable: true,
    },
    priority: {
      $ref: '#/components/schemas/Priority',
    },
    timeout: {
      type: 'string',
      description: 'The maximum time to wait for this step to complete.',
      nullable: true,
      example: '00:00:00',
    },
    retries: {
      type: 'integer',
      description: 'The maximum number of times this step should be retried.',
      format: 'int32',
      nullable: true,
    },
    jobs: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkflowStepJob',
      },
      description: 'The jobs generated by this step.',
    },
    status: {
      $ref: '#/components/schemas/WorkflowStatus',
    },
    startedAt: {
      type: 'string',
      description: 'The date / time the step was started. Null if not yet started.',
      format: 'date-time',
      nullable: true,
    },
    completedAt: {
      type: 'string',
      description: 'The date / time the step was completed. Null if not yet completed.',
      format: 'date-time',
      nullable: true,
    },
    metadata: {
      type: 'object',
      additionalProperties: {},
      description: 'A collection of user defined metadata for the workflow step.',
      nullable: true,
    },
    input: {
      $ref: '#/components/schemas/EchoInput',
    },
    output: {
      $ref: '#/components/schemas/EchoOutput',
    },
    $type: {
      enum: ['echo'],
      type: 'string',
    },
  },
  additionalProperties: false,
  description: 'This step is intended for testing purposes.',
} as const;

export const $EchoStepTemplate = {
  required: ['$type', 'input'],
  type: 'object',
  allOf: [
    {
      $ref: '#/components/schemas/WorkflowStepTemplate',
    },
  ],
  properties: {
    $type: {
      enum: ['echo'],
      type: 'string',
    },
    input: {
      $ref: '#/components/schemas/EchoInput',
    },
  },
  additionalProperties: false,
} as const;

export const $EcosystemElement = {
  type: 'object',
  additionalProperties: {
    $ref: '#/components/schemas/EcosystemElement',
  },
} as const;

export const $EpochResult = {
  required: ['blobName', 'blobSize'],
  type: 'object',
  properties: {
    blobName: {
      minLength: 1,
      type: 'string',
      description: 'Get the name of the generated epoch assets',
    },
    blobSize: {
      type: 'integer',
      description: 'Get the total size in bytes of the asset',
      format: 'int64',
    },
    sampleImages: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: 'Get a list of the names of the blobs that represent sample images',
    },
  },
  additionalProperties: false,
  description: 'An epock result.',
} as const;

export const $Expression = {
  type: 'object',
  additionalProperties: false,
} as const;

export const $Image = {
  required: ['available', 'id', 'jobId'],
  type: 'object',
  properties: {
    id: {
      minLength: 1,
      type: 'string',
      description: 'Gets the id of the blob that contains this image.',
    },
    available: {
      type: 'boolean',
      description: 'Gets a value indicating whether the image is available.',
    },
    url: {
      type: 'string',
      description: 'Gets a url that can be used to preview the image.',
      format: 'uri',
      nullable: true,
    },
    urlExpiresAt: {
      type: 'string',
      description: 'Get when the url is set to expire',
      format: 'date-time',
      nullable: true,
    },
    jobId: {
      minLength: 1,
      type: 'string',
      description: 'Get the id of the job that is associated with this image.',
    },
  },
  additionalProperties: false,
  description: 'Represents an image that is the result of a TextToImage workflow step.',
} as const;

export const $ImageJobControlNet = {
  type: 'object',
  properties: {
    preprocessor: {
      $ref: '#/components/schemas/ImageTransformer',
    },
    weight: {
      type: 'number',
      description: 'A value representing the weight applied to the ControlNet.',
      format: 'double',
    },
    startStep: {
      type: 'number',
      description: 'A value representing the start step selected for the ControlNet.',
      format: 'double',
    },
    endStep: {
      type: 'number',
      description: 'A value representing the end step selected for the ControlNet.',
      format: 'double',
    },
  },
  additionalProperties: false,
  description: 'Information for a controlnet provided for a text to image input.',
} as const;

export const $ImageJobNetworkParams = {
  type: 'object',
  properties: {
    strength: {
      type: 'number',
      description: 'In case of Lora and LoCon, set the strength of the network',
      format: 'double',
      nullable: true,
    },
    triggerWord: {
      type: 'string',
      description: 'In case of a TextualInversion, set the trigger word of the network',
      nullable: true,
    },
    type: {
      type: 'string',
      description: 'A legacy type set by the consumer',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const $ImageJobParams = {
  required: ['height', 'width'],
  type: 'object',
  properties: {
    prompt: {
      type: 'string',
      description: 'The prompt for the text to image generation.',
      nullable: true,
    },
    negativePrompt: {
      type: 'string',
      description: 'The negative prompt for the text to image generation.',
      nullable: true,
    },
    scheduler: {
      $ref: '#/components/schemas/Scheduler',
    },
    steps: {
      maximum: 150,
      minimum: 1,
      type: 'integer',
      description: 'The number of steps for the text to image generation.',
      format: 'int32',
      default: 30,
    },
    cfgScale: {
      maximum: 30,
      minimum: 1,
      type: 'number',
      description: 'The CFG scale value for the text to image generation.',
      format: 'double',
      default: 7.5,
      nullable: true,
    },
    width: {
      maximum: 2048,
      minimum: 64,
      type: 'integer',
      description: 'The width for the image to be generated in pixels.',
      format: 'int32',
      default: 512,
    },
    height: {
      maximum: 2048,
      minimum: 64,
      type: 'integer',
      description: 'The height for the image to be generated in pixels.',
      format: 'int32',
      default: 512,
    },
    seed: {
      maximum: 4294967295,
      minimum: -1,
      type: 'integer',
      description: 'The seed for the text to image generation.',
      format: 'int64',
      default: -1,
    },
    clipSkip: {
      type: 'integer',
      description: 'The clip skip value for the text to image generation.',
      format: 'int32',
      default: 2,
    },
  },
  additionalProperties: false,
  description: 'Parameters for a text to image step.',
} as const;

export const $ImageResourceTrainingInput = {
  required: ['model', 'trainingData'],
  type: 'object',
  properties: {
    model: {
      pattern:
        '^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_-/]+):)?(?:(?<type>[a-zA-Z0-9_-/]+):)?(?<source>[a-zA-Z0-9_-/]+):(?<id>[a-zA-Z0-9_-/.]+)(?:@(?<version>[a-zA-Z0-9_-.]+))?(?:.(?<format>[a-zA-Z0-9_-]+))?$',
      type: 'string',
      description: 'The primary model to train upon.',
    },
    trainingData: {
      type: 'string',
      description: 'A url referring data to use in training.',
      format: 'uri',
    },
    unetLR: {
      type: 'number',
      description: 'The desired learning rate for the U-Net.',
      format: 'double',
      default: 0.00005,
    },
    textEncoderLR: {
      type: 'number',
      description: 'The desired learning rate for the text encoder.',
      format: 'double',
      default: 0.00005,
    },
    optimizerType: {
      type: 'string',
      description: 'The desired optimizer type.',
      default: 'Adafactor',
    },
    networkDim: {
      type: 'integer',
      description: 'The desired network dimensionality.',
      format: 'int32',
      default: 16,
    },
    networkAlpha: {
      type: 'integer',
      description: 'The desired network alpha.',
      format: 'int32',
      default: 16,
    },
    lrScheduler: {
      type: 'string',
      description: 'The desired learning rate scheduler.',
      default: 'cosine_with_restarts',
    },
    maxTrainEpochs: {
      type: 'integer',
      description: 'The desired maximum number of training epochs.',
      format: 'int32',
      default: 3,
    },
    numRepeats: {
      type: 'integer',
      description: 'The desired number of repeats.',
      format: 'int32',
      default: 8,
    },
    resolution: {
      type: 'integer',
      description: 'The desired resolution.',
      format: 'int32',
      default: 512,
    },
    loraType: {
      type: 'string',
      description: 'The lora type.',
      default: 'lora',
    },
    enableBucket: {
      type: 'boolean',
      description: 'EnableBucket?',
      default: true,
    },
    keepTokens: {
      type: 'integer',
      description: 'KeepTokens?',
      format: 'int32',
      default: 0,
    },
    lrSchedulerNumCycles: {
      type: 'integer',
      description: 'The desired number of cycles for the learning rate scheduler.',
      format: 'int32',
      default: 3,
    },
    trainBatchSize: {
      type: 'integer',
      description: 'The desired training batch size.',
      format: 'int32',
      default: 1,
    },
    minSnrGamma: {
      type: 'integer',
      description: 'MinSnrGamm?',
      format: 'int32',
      default: 5,
    },
    optimizerArgs: {
      type: 'string',
      description: 'Provided arguments for the optimizer.',
      default: '',
    },
    shuffleCaption: {
      type: 'boolean',
      description: 'ShuffleCaption?',
      default: false,
    },
    loraName: {
      type: 'string',
      description: 'The desired lora name.',
      default: 'my-lora',
    },
    noiseOffset: {
      type: 'number',
      description: 'The desired noise offset.',
      format: 'double',
      default: 0.5,
    },
    samplePrompts: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: 'A selection of sample prompts.',
    },
  },
  additionalProperties: false,
  description: 'Input for an image resource training step.',
} as const;

export const $ImageResourceTrainingJob = {
  required: ['$type', 'model', 'params', 'trainingData'],
  type: 'object',
  allOf: [
    {
      $ref: '#/components/schemas/Job',
    },
  ],
  properties: {
    model: {
      pattern:
        '^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_-/]+):)?(?:(?<type>[a-zA-Z0-9_-/]+):)?(?<source>[a-zA-Z0-9_-/]+):(?<id>[a-zA-Z0-9_-/.]+)(?:@(?<version>[a-zA-Z0-9_-.]+))?(?:.(?<format>[a-zA-Z0-9_-]+))?$',
      type: 'string',
      description: 'An AIR representing the model to use.',
    },
    trainingData: {
      type: 'string',
      description: 'A url referring data that needs to be trained upon',
      format: 'uri',
    },
    params: {
      type: 'object',
      additionalProperties: {},
      description: 'A untyped set of parameters that are associated with this job',
    },
    cost: {
      type: 'number',
      description: 'Get cost associated with this job',
      format: 'double',
    },
    customCost: {
      type: 'number',
      description: 'Get or set a custom cost value for this job',
      format: 'double',
    },
    output: {
      type: 'string',
      description: 'An application provided output of the current status of this job',
      nullable: true,
    },
    type: {
      type: 'string',
      description: 'The job type.',
    },
    claimDuration: {
      type: 'string',
      description: `Rick: yeah i think for LoRA we need it to be 5-10 minutes.
lora training has this lame effect where it can't send updates while it is uploading... so we need to give it extra buffer`,
      example: '00:00:00',
    },
    $type: {
      enum: ['ImageResourceTrainingJob'],
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const $ImageResourceTrainingOutput = {
  required: ['epochs'],
  type: 'object',
  properties: {
    epochs: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/EpochResult',
      },
      description: 'An array of epochs.',
    },
    storedAsAssets: {
      type: 'boolean',
      description: `Get wether the blobs are actually stored as assets
Assets are deprecated and require a different retrieval mechanism`,
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const $ImageResourceTrainingStep = {
  required: ['$type', 'input'],
  type: 'object',
  allOf: [
    {
      $ref: '#/components/schemas/WorkflowStep',
    },
  ],
  properties: {
    name: {
      type: 'string',
      description: 'The name of the workflow step. Used to allow steps to refer to one another.',
      nullable: true,
    },
    priority: {
      $ref: '#/components/schemas/Priority',
    },
    timeout: {
      type: 'string',
      description: 'The maximum time to wait for this step to complete.',
      nullable: true,
      example: '00:00:00',
    },
    retries: {
      type: 'integer',
      description: 'The maximum number of times this step should be retried.',
      format: 'int32',
      nullable: true,
    },
    jobs: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkflowStepJob',
      },
      description: 'The jobs generated by this step.',
    },
    status: {
      $ref: '#/components/schemas/WorkflowStatus',
    },
    startedAt: {
      type: 'string',
      description: 'The date / time the step was started. Null if not yet started.',
      format: 'date-time',
      nullable: true,
    },
    completedAt: {
      type: 'string',
      description: 'The date / time the step was completed. Null if not yet completed.',
      format: 'date-time',
      nullable: true,
    },
    metadata: {
      type: 'object',
      additionalProperties: {},
      description: 'A collection of user defined metadata for the workflow step.',
      nullable: true,
    },
    input: {
      $ref: '#/components/schemas/ImageResourceTrainingInput',
    },
    output: {
      $ref: '#/components/schemas/ImageResourceTrainingOutput',
    },
    $type: {
      enum: ['imageResourceTraining'],
      type: 'string',
    },
  },
  additionalProperties: false,
  description: 'A workflow step for training image resources.',
} as const;

export const $ImageResourceTrainingStepTemplate = {
  required: ['$type', 'input'],
  type: 'object',
  allOf: [
    {
      $ref: '#/components/schemas/WorkflowStepTemplate',
    },
  ],
  properties: {
    $type: {
      enum: ['imageResourceTraining'],
      type: 'string',
    },
    input: {
      $ref: '#/components/schemas/ImageResourceTrainingInput',
    },
  },
  additionalProperties: false,
} as const;

export const $ImageTransformer = {
  enum: ['canny', 'depthZoe', 'softedgePidinet', 'rembg'],
  type: 'string',
  description: 'Available image transformers.',
} as const;

export const $Job = {
  required: ['$type'],
  type: 'object',
  properties: {
    $type: {
      type: 'string',
    },
    id: {
      type: 'string',
      description: 'A unique id for this job',
    },
    createdAt: {
      type: 'string',
      description: 'The date when this job got created',
      format: 'date-time',
    },
    expireAt: {
      type: 'string',
      description: 'The date for when this job was set to expire',
      format: 'date-time',
      nullable: true,
    },
    webhook: {
      type: 'string',
      description: 'A webhook to be invoked when the job receives a status update',
      format: 'uri',
      nullable: true,
    },
    properties: {
      type: 'object',
      additionalProperties: {},
      description:
        'A set of user defined properties that can be used to index and partition this job',
    },
    type: {
      type: 'string',
      description: 'The type of this job as a string',
    },
    cost: {
      type: 'number',
      description: 'Get a cost estimate for this job',
      format: 'double',
    },
    maxRetryAttempt: {
      type: 'integer',
      description: 'The max number of retries before we give up',
      format: 'int32',
    },
    dependencies: {
      type: 'object',
      additionalProperties: {
        type: 'array',
        items: {
          $ref: '#/components/schemas/DynamicAssignment',
        },
        nullable: true,
      },
      description: 'Get or set a list of dependencies that this job has',
    },
    issuedBy: {
      type: 'string',
      description: 'Get or set the name of the consumer that issued this job',
      nullable: true,
    },
    version: {
      type: 'integer',
      description:
        'Get or set the version of this job, this is used to track changes to the job schema',
      format: 'int32',
      default: 0,
    },
    claimDuration: {
      type: 'string',
      description: 'The total duration that the job can be claimed',
      example: '00:00:00',
    },
    recovered: {
      type: 'boolean',
      description:
        'An internal property to mark that the job has been recovered. We use this to not fiddle with up/down counters as we may have missed other counters',
    },
  },
  additionalProperties: false,
  discriminator: {
    propertyName: '$type',
    mapping: {
      ImageResourceTrainingJob: '#/components/schemas/ImageResourceTrainingJob',
      LLMPromptAugmentationJob: '#/components/schemas/LLMPromptAugmentationJob',
      SimilaritySearchJob: '#/components/schemas/SimilaritySearchJob',
      TextToImageJob: '#/components/schemas/TextToImageJob',
      TextToImageV2Job: '#/components/schemas/TextToImageV2Job',
    },
  },
} as const;

export const $JobSupport = {
  enum: ['unsupported', 'unavailable', 'available'],
  type: 'string',
  description: 'Available levels of job support.',
} as const;

export const $LLMPromptAugmentationCapabilities = {
  type: 'object',
  additionalProperties: false,
  description: 'LLM prompt augmentaition capabilities.',
} as const;

export const $LLMPromptAugmentationJob = {
  required: ['$type', 'model'],
  type: 'object',
  allOf: [
    {
      $ref: '#/components/schemas/Job',
    },
  ],
  properties: {
    model: {
      minLength: 1,
      type: 'string',
      description: 'The primary model to use.',
    },
    basePrompt: {
      type: 'string',
      description: 'The base prompt.',
      nullable: true,
    },
    prompts: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: 'A list of prompts.',
    },
    temp: {
      type: 'number',
      description: 'The temp.',
      format: 'double',
    },
    type: {
      type: 'string',
      description: 'The type.',
    },
    $type: {
      enum: ['LLMPromptAugmentationJob'],
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const $Priority = {
  enum: ['high', 'normal', 'low'],
  type: 'string',
  description: 'Available options for priority.',
} as const;

export const $ProblemDetails = {
  type: 'object',
  properties: {
    type: {
      type: 'string',
      nullable: true,
    },
    title: {
      type: 'string',
      nullable: true,
    },
    status: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    detail: {
      type: 'string',
      nullable: true,
    },
    instance: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: {},
} as const;

export const $ProcessingStatistics = {
  type: 'object',
  properties: {
    totalJobsRequested: {
      type: 'integer',
      description: 'The total number of jobs requested.',
      format: 'int64',
    },
    totalCostRequested: {
      type: 'number',
      description: 'The total cost of jobs requested.',
      format: 'double',
    },
    totalJobsSucceeded: {
      type: 'integer',
      description: 'The total number of successful jobs.',
      format: 'int64',
    },
    totalCostSucceeded: {
      type: 'number',
      description: 'The total cost of successful jobs.',
      format: 'double',
    },
    totalJobsRejected: {
      type: 'integer',
      description: 'The total number of rejected jobs.',
      format: 'int64',
    },
    totalCostRejected: {
      type: 'number',
      description: 'The total cost of rejected jobs.',
      format: 'double',
    },
    totalJobsLateRejected: {
      type: 'integer',
      description: 'The total number of late rejected jobs.',
      format: 'int64',
    },
    totalCostLateRejected: {
      type: 'number',
      description: 'The total cost of laterejected jobs.',
      format: 'double',
    },
    totalJobsExpired: {
      type: 'integer',
      description: 'The total number of expired jobs.',
      format: 'int64',
    },
    totalCostExpired: {
      type: 'number',
      description: 'The total cost of expired jobs.',
      format: 'double',
    },
    totalJobsFailed: {
      type: 'integer',
      description: 'The total number of failed jobs.',
      format: 'int64',
    },
    totalCostFailed: {
      type: 'number',
      description: 'The total cost of failed jobs.',
      format: 'double',
    },
    totalJobsCompleted: {
      type: 'integer',
      description: 'The total number of completed jobs.',
      format: 'int64',
    },
    totalCostCompleted: {
      type: 'number',
      description: 'The total cost of completed jobs.',
      format: 'double',
    },
  },
  additionalProperties: false,
  description: 'Details of processing statistics.',
} as const;

export const $ResourceInfo = {
  required: ['air', 'downloadUrls', 'hashes', 'size'],
  type: 'object',
  properties: {
    air: {
      pattern:
        '^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_-/]+):)?(?:(?<type>[a-zA-Z0-9_-/]+):)?(?<source>[a-zA-Z0-9_-/]+):(?<id>[a-zA-Z0-9_-/.]+)(?:@(?<version>[a-zA-Z0-9_-.]+))?(?:.(?<format>[a-zA-Z0-9_-]+))?$',
      type: 'string',
      description: 'An AIR ID for the resource.',
    },
    size: {
      type: 'integer',
      description: 'The resource size in bytes.',
      format: 'int64',
    },
    hashes: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
      description: 'A collection of hashes.',
    },
    downloadUrls: {
      type: 'array',
      items: {
        type: 'string',
        format: 'uri',
      },
      description: 'An array of download urls.',
    },
    resourceName: {
      type: 'string',
      description: 'The name of the resource.',
      nullable: true,
    },
    versionName: {
      type: 'string',
      description: 'The name of the version.',
      nullable: true,
    },
    invalidateAt: {
      type: 'string',
      description: 'A date time to invalidate at.',
      format: 'date-time',
      nullable: true,
    },
  },
  additionalProperties: false,
  description: 'Details for a specific resource.',
} as const;

export const $Scheduler = {
  enum: [
    'eulerA',
    'euler',
    'lms',
    'heun',
    'dpM2',
    'dpM2A',
    'dpM2SA',
    'dpM2M',
    'dpmsde',
    'dpmFast',
    'dpmAdaptive',
    'lmsKarras',
    'dpM2Karras',
    'dpM2AKarras',
    'dpM2SAKarras',
    'dpM2MKarras',
    'dpmsdeKarras',
    'ddim',
    'plms',
    'uniPC',
    'undefined',
    'lcm',
    'ddpm',
    'deis',
  ],
  type: 'string',
  description: 'The available options for schedulers used in image generation.',
} as const;

export const $SimilaritySearchJob = {
  required: ['$type', 'model', 'nsfwFilter', 'params', 'prompt'],
  type: 'object',
  allOf: [
    {
      $ref: '#/components/schemas/Job',
    },
  ],
  properties: {
    model: {
      pattern:
        '^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_-/]+):)?(?:(?<type>[a-zA-Z0-9_-/]+):)?(?<source>[a-zA-Z0-9_-/]+):(?<id>[a-zA-Z0-9_-/.]+)(?:@(?<version>[a-zA-Z0-9_-.]+))?(?:.(?<format>[a-zA-Z0-9_-]+))?$',
      type: 'string',
      description: 'An AIR ID representing the primary model.',
    },
    nsfwFilter: {
      minLength: 1,
      type: 'string',
      description: 'A value for the NSFW filter.',
    },
    prompt: {
      minLength: 1,
      type: 'string',
      description: 'The prompt provided.',
    },
    params: {
      type: 'object',
      additionalProperties: {},
      description: 'A collection of parameters.',
    },
    cost: {
      type: 'number',
      description: 'A value representing the cost of the job.',
      format: 'double',
    },
    type: {
      type: 'string',
      description: 'The job type.',
    },
    $type: {
      enum: ['SimilaritySearchJob'],
      type: 'string',
    },
  },
  additionalProperties: false,
  description: 'Details for a similarity search job.',
} as const;

export const $Subscription = {
  required: ['webhook'],
  type: 'object',
  properties: {
    webhook: {
      minLength: 1,
      type: 'string',
      description: 'The webhook url.',
    },
  },
  additionalProperties: false,
  description: 'A subscription for pushed based notifications.',
} as const;

export const $TextToImageInput = {
  required: ['height', 'model', 'width'],
  type: 'object',
  properties: {
    quantity: {
      maximum: 100,
      minimum: 1,
      type: 'integer',
      description: 'The number of batches to run.',
      format: 'int32',
      default: 1,
    },
    batchSize: {
      maximum: 100,
      minimum: 1,
      type: 'integer',
      description: 'The size of each batch.',
      format: 'int32',
      default: 1,
    },
    model: {
      pattern:
        '^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_-/]+):)?(?:(?<type>[a-zA-Z0-9_-/]+):)?(?<source>[a-zA-Z0-9_-/]+):(?<id>[a-zA-Z0-9_-/.]+)(?:@(?<version>[a-zA-Z0-9_-.]+))?(?:.(?<format>[a-zA-Z0-9_-]+))?$',
      type: 'string',
      description: 'The AIR of the checkpoint model to use for generation.',
    },
    additionalNetworks: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/ImageJobNetworkParams',
      },
      description:
        'Get or set a associative list of additional networks. Use the AIR of the network as the key.',
    },
    controlNets: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ImageJobControlNet',
      },
      description: 'Get or set a associative list of ControlNets.',
    },
    prompt: {
      type: 'string',
      description: 'The provided text prompt.',
      default: '',
    },
    negativePrompt: {
      type: 'string',
      description: 'The provided negative text prompt.',
      default: '',
    },
    scheduler: {
      $ref: '#/components/schemas/Scheduler',
    },
    steps: {
      maximum: 150,
      minimum: 1,
      type: 'integer',
      description: 'The number of steps for image generation.',
      format: 'int32',
      default: 30,
    },
    cfgScale: {
      maximum: 30,
      minimum: 1,
      type: 'number',
      description: 'The CFG scale value for image generation.',
      format: 'double',
      default: 7.5,
    },
    width: {
      maximum: 2048,
      minimum: 64,
      type: 'integer',
      description: 'The desired image width in pixels.',
      format: 'int32',
      default: 512,
    },
    height: {
      maximum: 2048,
      minimum: 64,
      type: 'integer',
      description: 'The desired image height in pixels.',
      format: 'int32',
      default: 512,
    },
    seed: {
      maximum: 4294967295,
      minimum: 0,
      type: 'integer',
      description:
        'The seed to use in image generation. Defaults to a random value if left unpopulated.',
      format: 'int64',
    },
    clipSkip: {
      type: 'integer',
      description: 'The clip skip value for image generation.',
      format: 'int32',
      default: 2,
    },
  },
  additionalProperties: false,
  description: 'Input for an text to image step.',
} as const;

export const $TextToImageJob = {
  required: ['$type', 'imageHash', 'model', 'params'],
  type: 'object',
  allOf: [
    {
      $ref: '#/components/schemas/Job',
    },
  ],
  properties: {
    model: {
      pattern:
        '^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_-/]+):)?(?:(?<type>[a-zA-Z0-9_-/]+):)?(?<source>[a-zA-Z0-9_-/]+):(?<id>[a-zA-Z0-9_-/.]+)(?:@(?<version>[a-zA-Z0-9_-.]+))?(?:.(?<format>[a-zA-Z0-9_-]+))?$',
      type: 'string',
      description: 'An AIR representing the model to use.',
    },
    params: {
      $ref: '#/components/schemas/ImageJobParams',
    },
    imageHash: {
      minLength: 1,
      type: 'string',
      description: 'The hash for the output image.',
    },
    additionalNetworks: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/ImageJobNetworkParams',
      },
      description:
        'Get or set a associative list of additional networks. Each network is identified by a hash code.',
    },
    destinationUrl: {
      type: 'string',
      description: 'Get or set the URL where the image will be uploaded to.',
      format: 'uri',
      nullable: true,
    },
    storeAsBlob: {
      type: 'boolean',
      description: 'A value indicating whether to store the image as a blob or as a legacy image.',
    },
    controlNets: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ImageJobControlNet',
      },
      description:
        'Get or set a list of control nets that should be applied with this textToImage job.',
    },
    cost: {
      type: 'number',
      description: 'A value representing the cost of the job.',
      format: 'double',
    },
    claimDuration: {
      type: 'string',
      description: 'The duration for which this job can be claimed for.',
      example: '00:00:00',
    },
    type: {
      type: 'string',
      description: 'The job type.',
    },
    $type: {
      enum: ['TextToImageJob'],
      type: 'string',
    },
  },
  additionalProperties: false,
  description: 'A text to image generation job.',
} as const;

export const $TextToImageJobSlot = {
  required: ['destinationUrl', 'imageHash'],
  type: 'object',
  properties: {
    imageHash: {
      minLength: 1,
      type: 'string',
      description: 'The hash for the image output.',
    },
    destinationUrl: {
      type: 'string',
      description: 'The destination url for image upload.',
      format: 'uri',
    },
  },
  additionalProperties: false,
  description: 'Contains slot information for an image generated by a TextToImageJob.',
} as const;

export const $TextToImageOutput = {
  required: ['images'],
  type: 'object',
  properties: {
    images: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Image',
      },
      description: 'A collection of output images.',
    },
  },
  additionalProperties: false,
  description: 'Represents the output of a TextToImage workflow step.',
} as const;

export const $TextToImageStep = {
  required: ['$type', 'input'],
  type: 'object',
  allOf: [
    {
      $ref: '#/components/schemas/WorkflowStep',
    },
  ],
  properties: {
    name: {
      type: 'string',
      description: 'The name of the workflow step. Used to allow steps to refer to one another.',
      nullable: true,
    },
    priority: {
      $ref: '#/components/schemas/Priority',
    },
    timeout: {
      type: 'string',
      description: 'The maximum time to wait for this step to complete.',
      nullable: true,
      example: '00:00:00',
    },
    retries: {
      type: 'integer',
      description: 'The maximum number of times this step should be retried.',
      format: 'int32',
      nullable: true,
    },
    jobs: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkflowStepJob',
      },
      description: 'The jobs generated by this step.',
    },
    status: {
      $ref: '#/components/schemas/WorkflowStatus',
    },
    startedAt: {
      type: 'string',
      description: 'The date / time the step was started. Null if not yet started.',
      format: 'date-time',
      nullable: true,
    },
    completedAt: {
      type: 'string',
      description: 'The date / time the step was completed. Null if not yet completed.',
      format: 'date-time',
      nullable: true,
    },
    metadata: {
      type: 'object',
      additionalProperties: {},
      description: 'A collection of user defined metadata for the workflow step.',
      nullable: true,
    },
    input: {
      $ref: '#/components/schemas/TextToImageInput',
    },
    output: {
      $ref: '#/components/schemas/TextToImageOutput',
    },
    $type: {
      enum: ['textToImage'],
      type: 'string',
    },
  },
  additionalProperties: false,
  description: 'A workflow step for text to image generations.',
} as const;

export const $TextToImageStepTemplate = {
  required: ['$type', 'input'],
  type: 'object',
  allOf: [
    {
      $ref: '#/components/schemas/WorkflowStepTemplate',
    },
  ],
  properties: {
    $type: {
      enum: ['textToImage'],
      type: 'string',
    },
    input: {
      $ref: '#/components/schemas/TextToImageInput',
    },
  },
  additionalProperties: false,
} as const;

export const $TextToImageV2Job = {
  required: ['$type', 'model', 'params', 'slots'],
  type: 'object',
  allOf: [
    {
      $ref: '#/components/schemas/Job',
    },
  ],
  properties: {
    model: {
      pattern:
        '^(?:urn:)?(?:air:)?(?:(?<ecosystem>[a-zA-Z0-9_-/]+):)?(?:(?<type>[a-zA-Z0-9_-/]+):)?(?<source>[a-zA-Z0-9_-/]+):(?<id>[a-zA-Z0-9_-/.]+)(?:@(?<version>[a-zA-Z0-9_-.]+))?(?:.(?<format>[a-zA-Z0-9_-]+))?$',
      type: 'string',
      description: 'An AIR representing the model to use.',
    },
    params: {
      $ref: '#/components/schemas/ImageJobParams',
    },
    slots: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/TextToImageJobSlot',
      },
      description: 'Slots for the resulting image outputs.',
    },
    additionalNetworks: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/ImageJobNetworkParams',
      },
      description:
        'Get or set a associative list of additional networks. Each network is identified by a hash code',
    },
    controlNets: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ImageJobControlNet',
      },
      description:
        'Get or set a list of control nets that should be applied with this textToImage job',
    },
    cost: {
      type: 'number',
      description: 'A value representing the cost of the job.',
      format: 'double',
    },
    claimDuration: {
      type: 'string',
      description: 'The duration for which this job can be claimed for.',
      example: '00:00:00',
    },
    type: {
      type: 'string',
      description: 'The job type.',
    },
    $type: {
      enum: ['TextToImageV2Job'],
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const $TransactionInfo = {
  required: ['amount', 'id'],
  type: 'object',
  properties: {
    amount: {
      type: 'integer',
      description: 'The transaction amount.',
      format: 'int32',
    },
    id: {
      minLength: 1,
      type: 'string',
      description: 'The transaction ID.',
      nullable: true,
    },
  },
  additionalProperties: false,
  description: 'Transaction information.',
} as const;

export const $TranscodeInput = {
  required: ['sourceUrl'],
  type: 'object',
  properties: {
    sourceUrl: {
      type: 'string',
      format: 'uri',
    },
    containerFormat: {
      $ref: '#/components/schemas/ContainerFormat',
    },
    width: {
      type: 'integer',
      format: 'int32',
    },
    destinationUrl: {
      type: 'string',
      format: 'uri',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const $TranscodeOutput = {
  required: ['available', 'id', 'jobId'],
  type: 'object',
  properties: {
    id: {
      minLength: 1,
      type: 'string',
      description: 'Gets the id of the blob that contains the media.',
    },
    available: {
      type: 'boolean',
      description: 'Gets a value indicating whether the media is available.',
    },
    url: {
      type: 'string',
      description: 'Gets a url that can be used to preview the media.',
      format: 'uri',
      nullable: true,
    },
    urlExpiresAt: {
      type: 'string',
      description: 'Get when the url is set to expire',
      format: 'date-time',
      nullable: true,
    },
    jobId: {
      minLength: 1,
      type: 'string',
      description: 'Get the id of the job that is associated with this media.',
    },
  },
  additionalProperties: false,
} as const;

export const $TranscodeStep = {
  required: ['$type', 'input'],
  type: 'object',
  allOf: [
    {
      $ref: '#/components/schemas/WorkflowStep',
    },
  ],
  properties: {
    name: {
      type: 'string',
      description: 'The name of the workflow step. Used to allow steps to refer to one another.',
      nullable: true,
    },
    priority: {
      $ref: '#/components/schemas/Priority',
    },
    timeout: {
      type: 'string',
      description: 'The maximum time to wait for this step to complete.',
      nullable: true,
      example: '00:00:00',
    },
    retries: {
      type: 'integer',
      description: 'The maximum number of times this step should be retried.',
      format: 'int32',
      nullable: true,
    },
    jobs: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkflowStepJob',
      },
      description: 'The jobs generated by this step.',
    },
    status: {
      $ref: '#/components/schemas/WorkflowStatus',
    },
    startedAt: {
      type: 'string',
      description: 'The date / time the step was started. Null if not yet started.',
      format: 'date-time',
      nullable: true,
    },
    completedAt: {
      type: 'string',
      description: 'The date / time the step was completed. Null if not yet completed.',
      format: 'date-time',
      nullable: true,
    },
    metadata: {
      type: 'object',
      additionalProperties: {},
      description: 'A collection of user defined metadata for the workflow step.',
      nullable: true,
    },
    input: {
      $ref: '#/components/schemas/TranscodeInput',
    },
    output: {
      $ref: '#/components/schemas/TranscodeOutput',
    },
    $type: {
      enum: ['transcode'],
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const $TranscodeStepTemplate = {
  required: ['$type', 'input'],
  type: 'object',
  allOf: [
    {
      $ref: '#/components/schemas/WorkflowStepTemplate',
    },
  ],
  properties: {
    $type: {
      enum: ['transcode'],
      type: 'string',
    },
    input: {
      $ref: '#/components/schemas/TranscodeInput',
    },
  },
  additionalProperties: false,
} as const;

export const $UpdateWorkflowRequest = {
  type: 'object',
  properties: {
    status: {
      $ref: '#/components/schemas/UpdateWorkflowStatus',
    },
    metadata: {
      type: 'object',
      additionalProperties: {},
      description: 'An optional set of new properties to set on the workflow.',
      nullable: true,
    },
  },
  additionalProperties: false,
  description: 'An request for updating a workflow.',
} as const;

export const $UpdateWorkflowStatus = {
  enum: ['canceled'],
  type: 'string',
  description: 'Available statuses for updating workflows.',
  nullable: true,
} as const;

export const $UpdateWorkflowStepRequest = {
  required: ['metadata'],
  type: 'object',
  properties: {
    metadata: {
      type: 'object',
      additionalProperties: {},
      description: 'An set of new properties to set on the workflow step.',
    },
  },
  additionalProperties: false,
} as const;

export const $WorkerCapabilities = {
  type: 'object',
  properties: {
    image: {
      $ref: '#/components/schemas/WorkerImageCapabilities',
    },
    media: {
      $ref: '#/components/schemas/WorkerMediaCapabilities',
    },
    modelManagement: {
      $ref: '#/components/schemas/WorkerModelPreparationCapabilities',
    },
    configurationManagement: {
      $ref: '#/components/schemas/WorkerConfigurationCapabilities',
    },
    similaritySearch: {
      $ref: '#/components/schemas/WorkerSimilaritySearchCapabilities',
    },
    llmPromptAugmentation: {
      $ref: '#/components/schemas/LLMPromptAugmentationCapabilities',
    },
  },
  additionalProperties: false,
  description: "Details of a worker's capabilities.",
} as const;

export const $WorkerConfigurationCapabilities = {
  type: 'object',
  additionalProperties: false,
  description: "Details of a worker's configuration capabilities.",
} as const;

export const $WorkerDetails = {
  required: ['id', 'name'],
  type: 'object',
  properties: {
    id: {
      minLength: 1,
      type: 'string',
      description: "The worker's ID.",
    },
    name: {
      minLength: 1,
      type: 'string',
      description: "The worker's name.",
    },
    activeJobs: {
      type: 'integer',
      description: "The worker's active job count.",
      format: 'int32',
    },
    queueSize: {
      type: 'integer',
      description: "The number of jobs in the worker's queue.",
      format: 'int32',
    },
    queueDepth: {
      type: 'number',
      description: "The total cost of job's in the worker's queue.",
      format: 'double',
    },
    startDate: {
      type: 'string',
      description: "The worker's start date / time.",
      format: 'date-time',
    },
    lastRequestDate: {
      type: 'string',
      description: "The worker's last request date / time.",
      format: 'date-time',
      nullable: true,
    },
    expirationDate: {
      type: 'string',
      description: "The worker's expiration date / time.",
      format: 'date-time',
      nullable: true,
    },
    statistics: {
      $ref: '#/components/schemas/ProcessingStatistics',
    },
    succeededThroughputRate: {
      type: 'number',
      description: "The worker's succeeded job throughput rate.",
      format: 'double',
    },
    failedThroughputRate: {
      type: 'number',
      description: "The worker's failed job throughput rate.",
      format: 'double',
    },
    idleRate: {
      type: 'number',
      description: "The worker's idle rate.",
      format: 'double',
    },
    lastSuccesfullyCompletedJobDate: {
      type: 'string',
      description: "The date / time of the worker's last successfully completed job.",
      format: 'date-time',
      nullable: true,
    },
    lastJobUpdateDate: {
      type: 'string',
      description: "The date / time of the worker's last job update.",
      format: 'date-time',
      nullable: true,
    },
    subscriptionSetDate: {
      type: 'string',
      description: "The date / time that the worker's subscription was set.",
      format: 'date-time',
      nullable: true,
    },
    quarantineDate: {
      type: 'string',
      description: 'The date / time that the worker was quarantined.',
      format: 'date-time',
      nullable: true,
    },
    resourceDownloadRate: {
      type: 'number',
      description: 'The rate at which this worker has been downloading',
      format: 'double',
    },
    resourceEvictionRate: {
      type: 'number',
      description: 'The rate at which this worker has been evicting resources',
      format: 'double',
    },
  },
  additionalProperties: false,
  description: 'Details for a particular worker.',
} as const;

export const $WorkerImageCapabilities = {
  type: 'object',
  properties: {
    textToImage: {
      $ref: '#/components/schemas/WorkerImageTextToImageCapabilities',
    },
    imageToImage: {
      $ref: '#/components/schemas/WorkerImageImageToImageCapabilities',
    },
    transform: {
      $ref: '#/components/schemas/WorkerImageTransformCapabilities',
    },
    resourceTraining: {
      $ref: '#/components/schemas/WorkerImageResourceTrainingCapabilities',
    },
    embedding: {
      $ref: '#/components/schemas/WorkerImageEmbeddingCapabilities',
    },
  },
  additionalProperties: false,
  description: "Details of a worker's image capabilities.",
} as const;

export const $WorkerImageEmbeddingCapabilities = {
  type: 'object',
  additionalProperties: false,
  description: "Details of a worker's image embedding capabilities.",
} as const;

export const $WorkerImageImageToImageCapabilities = {
  type: 'object',
  properties: {
    size: {
      type: 'integer',
      description: "The worker's maximum supported image size for image to image (squared).",
      format: 'int32',
    },
    schedulers: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Scheduler',
      },
      description: 'A list of schedulers the worker supports for image to image.',
    },
    controlNet: {
      maximum: 10,
      minimum: 0,
      type: 'integer',
      description: 'The number of ControlNets the worker supports for image to image (at once).',
      format: 'int32',
    },
    inpainting: {
      type: 'boolean',
      description: 'Indicates whether the worker supports inpaiting.',
    },
  },
  additionalProperties: false,
  description: "Details of a worker's image to image capabilities.",
} as const;

export const $WorkerImageResourceTrainingCapabilities = {
  type: 'object',
  additionalProperties: false,
  description: "Details of a worker's image resource training capabilities.",
} as const;

export const $WorkerImageTextToImageCapabilities = {
  type: 'object',
  properties: {
    size: {
      type: 'integer',
      description: "The worker's maximum supported image size for text to image (squared).",
      format: 'int32',
    },
    schedulers: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Scheduler',
      },
      description: 'A list of schedulers the worker supports for text to image.',
    },
    controlNet: {
      maximum: 10,
      minimum: 0,
      type: 'integer',
      description: 'The number of ControlNets the worker supports for text to image (at once).',
      format: 'int32',
    },
  },
  additionalProperties: false,
  description: "Details of a worker's text to image capabilities.",
} as const;

export const $WorkerImageTransformCapabilities = {
  type: 'object',
  properties: {
    transformers: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ImageTransformer',
      },
      description: 'A list of supported image transformers.',
    },
  },
  additionalProperties: false,
  description: "Details of a worker's image transform capabilities.",
} as const;

export const $WorkerMediaCapabilities = {
  type: 'object',
  properties: {
    wdTagging: {
      $ref: '#/components/schemas/WorkerMediaWDTaggingCapabilities',
    },
    comfy: {
      $ref: '#/components/schemas/WorkerMediaComfyCapabilities',
    },
    tagging: {
      $ref: '#/components/schemas/WorkerMediaTaggingCapabilities',
    },
    movieRating: {
      $ref: '#/components/schemas/WorkerMediaMovieRatingCapabilities',
    },
    transcode: {
      $ref: '#/components/schemas/WorkerMediaTranscodeCapabilities',
    },
  },
  additionalProperties: false,
  description: "Details of a worker's media capabilities.",
} as const;

export const $WorkerMediaComfyCapabilities = {
  type: 'object',
  additionalProperties: false,
  description: "Details of a worker's media comfy capabilities.",
} as const;

export const $WorkerMediaMovieRatingCapabilities = {
  type: 'object',
  additionalProperties: false,
  description: "Details of a worker's media movie rating capabilities.",
} as const;

export const $WorkerMediaTaggingCapabilities = {
  type: 'object',
  additionalProperties: false,
  description: "Details of a worker's media tagging capabilities.",
} as const;

export const $WorkerMediaTranscodeCapabilities = {
  type: 'object',
  additionalProperties: false,
} as const;

export const $WorkerMediaWDTaggingCapabilities = {
  type: 'object',
  additionalProperties: false,
  description: "Details of a worker's media WD tagging capabilities.",
} as const;

export const $WorkerModelPreparationCapabilities = {
  type: 'object',
  additionalProperties: false,
  description: "Details of a worker's model preparation capabilities.",
} as const;

export const $WorkerRegistration = {
  required: ['name'],
  type: 'object',
  properties: {
    name: {
      minLength: 1,
      type: 'string',
      description: "The worker's name.",
    },
    onDemandResourceTypes: {
      uniqueItems: true,
      type: 'array',
      items: {
        type: 'string',
      },
      description: 'A hash set of resource types the worker can retrieve on demand.',
    },
    capabilities: {
      $ref: '#/components/schemas/WorkerCapabilities',
    },
    subscription: {
      $ref: '#/components/schemas/Subscription',
    },
    type: {
      $ref: '#/components/schemas/WorkerType',
    },
    concurrentLimit: {
      type: 'integer',
      description: 'The number of requests the worker can handle at once.',
      format: 'int32',
    },
    ecosystems: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/EcosystemElement',
      },
      description: 'A collection of ecosystems the worker supports.',
    },
    resources: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/WorkerResourceStatus',
      },
      description:
        'A collection of information about the availability of particular resources on this worker.',
    },
    cacheLevel: {
      type: 'string',
      description: 'The name of the closest cache level that this worker can interact with.',
      nullable: true,
    },
    maxColdSwapQueueSize: {
      type: 'integer',
      description:
        'The max queue size before the worker stops accepting requests that require cold swapping.',
      format: 'int32',
      nullable: true,
    },
    maxPendingResourceSize: {
      type: 'integer',
      description: 'The max size in Mb of downloads that can be pending.',
      format: 'int32',
      nullable: true,
    },
    consumeUnavailableJobs: {
      type: 'boolean',
      description: 'A value indicating if worker should consume jobs that are not yet available.',
    },
    nodeIdentifier: {
      type: 'string',
      description: 'An optional identifier unique to this worker.',
      nullable: true,
    },
  },
  additionalProperties: false,
  description: "Details of a worker's registration.",
} as const;

export const $WorkerResourceAvailability = {
  enum: ['unknown', 'unsupported', 'unavailable', 'available', 'providerUnsupported'],
  type: 'string',
  description: 'Options for representing the status for a resource on a worker.',
} as const;

export const $WorkerResourceStatus = {
  required: ['availability'],
  type: 'object',
  properties: {
    availability: {
      $ref: '#/components/schemas/WorkerResourceAvailability',
    },
    cost: {
      type: 'number',
      description: 'The cost associated with this resource.',
      format: 'float',
    },
  },
  additionalProperties: false,
  description: 'Details for the status of a resource on a particular worker.',
} as const;

export const $WorkerSimilaritySearchCapabilities = {
  type: 'object',
  additionalProperties: false,
  description: "Details of a worker's similarity search capabilities.",
} as const;

export const $WorkerType = {
  enum: ['normal', 'deferred'],
  type: 'string',
  description: 'Available values for worker type.',
} as const;

export const $Workflow = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: 'The ID for the workflow.',
      nullable: true,
    },
    createdAt: {
      type: 'string',
      description: 'The date / time the workflow was created.',
      format: 'date-time',
    },
    transactions: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/TransactionInfo',
      },
      description: 'An array of transactions on this workflow.',
      nullable: true,
    },
    metadata: {
      type: 'object',
      additionalProperties: {},
      description: 'A collection of user defined metadata for the workflow.',
      nullable: true,
    },
    status: {
      $ref: '#/components/schemas/WorkflowStatus',
    },
    startedAt: {
      type: 'string',
      description: 'The date / time the workflow was started. Null if not yet started.',
      format: 'date-time',
      nullable: true,
    },
    completedAt: {
      type: 'string',
      description: 'The date / time the workflow was completed. Null if not yet complete.',
      format: 'date-time',
      nullable: true,
    },
    steps: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkflowStep',
      },
      description: 'The steps for the workflow.',
    },
    callbacks: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkflowCallback',
      },
      description: 'An array of callback details for the workflow.',
    },
    tags: {
      uniqueItems: true,
      type: 'array',
      items: {
        type: 'string',
      },
      description: 'An optional list of tags for the workflow.',
    },
  },
  additionalProperties: false,
  description: 'Details of a workflow.',
} as const;

export const $WorkflowCallback = {
  required: ['type', 'url'],
  type: 'object',
  properties: {
    url: {
      type: 'string',
      description: 'The url for the callback.',
      format: 'uri',
    },
    type: {
      type: 'array',
      items: {
        enum: [
          'workflow:*',
          'workflow:unassigned',
          'workflow:processing',
          'workflow:succeeded',
          'workflow:failed',
          'workflow:expired',
          'workflow:canceled',
          'step:*',
          'step:unassigned',
          'step:processing',
          'step:succeeded',
          'step:failed',
          'step:expired',
          'step:canceled',
          'job:*',
          'job:unassigned',
          'job:processing',
          'job:succeeded',
          'job:failed',
          'job:expired',
          'job:canceled',
        ],
        type: 'string',
        example: 'workflow:succeeded',
      },
      description: 'An array of event types to send to the callback.',
    },
  },
  additionalProperties: false,
  description: 'Details of a callback setup for a workflow.',
} as const;

export const $WorkflowEvent = {
  required: ['status', 'workflowId'],
  type: 'object',
  properties: {
    workflowId: {
      minLength: 1,
      type: 'string',
      description: 'The ID that represents the corresponding workflow.',
    },
    status: {
      $ref: '#/components/schemas/WorkflowStatus',
    },
    $type: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
  description: 'Details of a workflow event.',
} as const;

export const $WorkflowStatus = {
  enum: [
    'unassigned',
    'preparing',
    'scheduled',
    'processing',
    'succeeded',
    'failed',
    'expired',
    'canceled',
  ],
  type: 'string',
  description: 'Values available to represent workflow status.',
} as const;

export const $WorkflowStep = {
  required: ['$type'],
  type: 'object',
  properties: {
    $type: {
      type: 'string',
    },
    name: {
      type: 'string',
      description: 'The name of the workflow step. Used to allow steps to refer to one another.',
      nullable: true,
    },
    priority: {
      $ref: '#/components/schemas/Priority',
    },
    timeout: {
      type: 'string',
      description: 'The maximum time to wait for this step to complete.',
      nullable: true,
      example: '00:00:00',
    },
    retries: {
      type: 'integer',
      description: 'The maximum number of times this step should be retried.',
      format: 'int32',
      nullable: true,
    },
    jobs: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkflowStepJob',
      },
      description: 'The jobs generated by this step.',
    },
    status: {
      $ref: '#/components/schemas/WorkflowStatus',
    },
    startedAt: {
      type: 'string',
      description: 'The date / time the step was started. Null if not yet started.',
      format: 'date-time',
      nullable: true,
    },
    completedAt: {
      type: 'string',
      description: 'The date / time the step was completed. Null if not yet completed.',
      format: 'date-time',
      nullable: true,
    },
    metadata: {
      type: 'object',
      additionalProperties: {},
      description: 'A collection of user defined metadata for the workflow step.',
      nullable: true,
    },
  },
  additionalProperties: false,
  description: 'Details of a workflow step.',
  discriminator: {
    propertyName: '$type',
    mapping: {
      transcode: '#/components/schemas/TranscodeStep',
      textToImage: '#/components/schemas/TextToImageStep',
      imageResourceTraining: '#/components/schemas/ImageResourceTrainingStep',
      echo: '#/components/schemas/EchoStep',
    },
  },
} as const;

export const $WorkflowStepEvent = {
  required: ['status', 'stepName', 'workflowId'],
  type: 'object',
  properties: {
    workflowId: {
      minLength: 1,
      type: 'string',
      description: 'The workflow ID.',
    },
    stepName: {
      minLength: 1,
      type: 'string',
      description: "The workflow step's name.",
    },
    status: {
      $ref: '#/components/schemas/WorkflowStatus',
    },
    $type: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
  description: 'Details of a workflow step event.',
} as const;

export const $WorkflowStepJob = {
  required: ['cost', 'id'],
  type: 'object',
  properties: {
    id: {
      minLength: 1,
      type: 'string',
      description: "The job's ID.",
    },
    cost: {
      type: 'number',
      description: "The job's cost.",
      format: 'double',
    },
    status: {
      $ref: '#/components/schemas/WorkflowStatus',
    },
    startedAt: {
      type: 'string',
      description: 'The date / time the job started. Null if not yet started.',
      format: 'date-time',
      nullable: true,
    },
    completedAt: {
      type: 'string',
      description: 'The date / time the job completed. Null if not yet completed.',
      format: 'date-time',
      nullable: true,
    },
    queuePosition: {
      $ref: '#/components/schemas/WorkflowStepJobQueuePosition',
    },
  },
  additionalProperties: false,
  description: 'Details of a job produced by a workflow step.',
} as const;

export const $WorkflowStepJobEvent = {
  required: ['jobId', 'status', 'stepName', 'workflowId'],
  type: 'object',
  properties: {
    workflowId: {
      minLength: 1,
      type: 'string',
      description: 'The workflow ID.',
    },
    stepName: {
      minLength: 1,
      type: 'string',
      description: "The step's name.",
    },
    jobId: {
      minLength: 1,
      type: 'string',
      description: "The job's ID.",
    },
    status: {
      $ref: '#/components/schemas/WorkflowStatus',
    },
    $type: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
  description: 'Details of a workflow step job event.',
} as const;

export const $WorkflowStepJobQueuePosition = {
  type: 'object',
  properties: {
    support: {
      $ref: '#/components/schemas/JobSupport',
    },
    precedingJobs: {
      type: 'integer',
      description: 'The number of preceding jobs in the queue.',
      format: 'int32',
      nullable: true,
    },
    startAt: {
      type: 'string',
      description: 'An estimated date / time for when the job will start.',
      format: 'date-time',
      nullable: true,
    },
    completeAt: {
      type: 'string',
      description: 'An estimated date / time for when the job will complete.',
      format: 'date-time',
      nullable: true,
    },
  },
  additionalProperties: false,
  description: "Details of the workflow step job's queue position.",
} as const;

export const $WorkflowStepTemplate = {
  required: ['$type', 'input'],
  type: 'object',
  properties: {
    $type: {
      minLength: 1,
      type: 'string',
      description: 'The type of step the template represents.',
    },
    name: {
      type: 'string',
      description: 'The name of the workflow step. Used to allow steps to refer to one another.',
      nullable: true,
    },
    priority: {
      $ref: '#/components/schemas/Priority',
    },
    timeout: {
      type: 'string',
      description: 'The maximum time to wait for this step to complete.',
      nullable: true,
      example: '00:00:00',
    },
    retries: {
      type: 'integer',
      description: 'The maximum number of times this step should be retried.',
      format: 'int32',
      nullable: true,
    },
    metadata: {
      type: 'object',
      additionalProperties: {},
      description: 'A collection of user defined metadata for the workflow step.',
      nullable: true,
    },
  },
  additionalProperties: false,
  description: 'Details of a workflow step template.',
  discriminator: {
    propertyName: '$type',
    mapping: {
      transcode: '#/components/schemas/TranscodeStepTemplate',
      textToImage: '#/components/schemas/TextToImageStepTemplate',
      imageResourceTraining: '#/components/schemas/ImageResourceTrainingStepTemplate',
      echo: '#/components/schemas/EchoStepTemplate',
    },
  },
} as const;

export const $WorkflowTemplate = {
  required: ['steps'],
  type: 'object',
  properties: {
    metadata: {
      type: 'object',
      additionalProperties: {},
      description:
        'A collection of user defined metadata that can be used to store additional information about the workflow.',
      nullable: true,
    },
    tags: {
      maxItems: 10,
      uniqueItems: true,
      type: 'array',
      items: {
        type: 'string',
      },
      description: `A list of tags associated with this workflow.
Tags are indexed and can be used to search for workflows.
At most 10 tags can be assigned to a workflow. Each tag can be at most 200 characters long.`,
      nullable: true,
    },
    steps: {
      minItems: 1,
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkflowStepTemplate',
      },
      description: 'An array of steps that compose this workflow.',
    },
    callbacks: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkflowCallback',
      },
      description: 'An array of callbacks to be triggered during the lifetime of the workflow.',
    },
  },
  additionalProperties: false,
  description: 'Details of a requested workflow.',
} as const;
