// This file is auto-generated by @hey-api/openapi-ts

import { client, type Options } from '@hey-api/client-fetch';
import type {
  UploadBlobData,
  UploadBlobError,
  UploadBlobResponse,
  GetBlobData,
  HeadBlobData,
  HeadBlobError,
  HeadBlobResponse,
  ClaimJobsData,
  ClaimJobsError,
  ClaimJobsResponse,
  UpdateClaimStatusData,
  UpdateClaimStatusError,
  UpdateClaimStatusResponse,
  CreateConfigurationData,
  CreateConfigurationError,
  CreateConfigurationResponse,
  QueryConfigurationsError,
  QueryConfigurationsResponse,
  GetConfigurationData,
  GetConfigurationError,
  GetConfigurationResponse,
  DeleteConfigurationData,
  DeleteConfigurationError,
  DeleteConfigurationResponse,
  InvokeAgeClassificationStepTemplateData,
  InvokeAgeClassificationStepTemplateError,
  InvokeAgeClassificationStepTemplateResponse,
  InvokeComfyStepTemplateData,
  InvokeComfyStepTemplateError,
  InvokeComfyStepTemplateResponse,
  InvokeEchoStepTemplateData,
  InvokeEchoStepTemplateError,
  InvokeEchoStepTemplateResponse,
  InvokeImageResourceTrainingStepTemplateData,
  InvokeImageResourceTrainingStepTemplateError,
  InvokeImageResourceTrainingStepTemplateResponse,
  InvokeImageUploadStepTemplateData,
  InvokeImageUploadStepTemplateError,
  InvokeImageUploadStepTemplateResponse,
  InvokeTextToImageStepTemplateData,
  InvokeTextToImageStepTemplateError,
  InvokeTextToImageStepTemplateResponse,
  InvokeVideoGenStepTemplateData,
  InvokeVideoGenStepTemplateError,
  InvokeVideoGenStepTemplateResponse,
  GetResourceData,
  GetResourceError,
  GetResourceResponse,
  InvalidateResourceData,
  InvalidateResourceError,
  InvalidateResourceResponse,
  GetRecommendedResourcesData,
  GetRecommendedResourcesError,
  GetRecommendedResourcesResponse,
  DownloadResourceData,
  DownloadResourceError,
  DownloadResourceResponse,
  CreateWorkerData,
  CreateWorkerError,
  CreateWorkerResponse,
  QueryWorkersError,
  QueryWorkersResponse,
  GetWorkerData,
  GetWorkerError,
  GetWorkerResponse,
  DeleteWorkerData,
  DeleteWorkerError,
  DeleteWorkerResponse,
  GetRegistrationData,
  GetRegistrationError,
  GetRegistrationResponse,
  UpdateWorkerRegistrationData,
  UpdateWorkerRegistrationError,
  UpdateWorkerRegistrationResponse,
  PatchWorkerResourcesData,
  PatchWorkerResourcesError,
  PatchWorkerResourcesResponse,
  SubmitWorkflowData,
  SubmitWorkflowError,
  SubmitWorkflowResponse,
  QueryWorkflowsData,
  QueryWorkflowsError,
  QueryWorkflowsResponse,
  GetWorkflowData,
  GetWorkflowError,
  GetWorkflowResponse,
  UpdateWorkflowData,
  UpdateWorkflowError,
  UpdateWorkflowResponse,
  PatchWorkflowData,
  PatchWorkflowError,
  PatchWorkflowResponse,
  DeleteWorkflowData,
  DeleteWorkflowError,
  DeleteWorkflowResponse,
  AddWorkflowTagData,
  AddWorkflowTagError,
  AddWorkflowTagResponse,
  RemoveAllWorkflowTagsData,
  RemoveAllWorkflowTagsError,
  RemoveAllWorkflowTagsResponse,
  RemoveWorkflowTagData,
  RemoveWorkflowTagError,
  RemoveWorkflowTagResponse,
  GetWorkflowStepData,
  GetWorkflowStepError,
  GetWorkflowStepResponse,
  UpdateWorkflowStepData,
  UpdateWorkflowStepError,
  UpdateWorkflowStepResponse,
  PatchWorkflowStepData,
  PatchWorkflowStepError,
  PatchWorkflowStepResponse,
} from './types.gen';

export const uploadBlob = (options: Options<UploadBlobData>) => {
  return (options?.client ?? client).put<UploadBlobResponse, UploadBlobError>({
    ...options,
    url: '/v2/providers/blobs/{blobKey}',
  });
};

/**
 * Get blob by ID. This will return the blob as a binary stream.
 */
export const getBlob = (options: Options<GetBlobData>) => {
  return (options?.client ?? client).get<void>({
    ...options,
    url: '/v2/consumer/blobs/{blobId}',
  });
};

export const headBlob = (options: Options<HeadBlobData>) => {
  return (options?.client ?? client).head<HeadBlobResponse, HeadBlobError>({
    ...options,
    url: '/v2/consumer/blobs/{blobId}',
  });
};

export const claimJobs = (options: Options<ClaimJobsData>) => {
  return (options?.client ?? client).get<ClaimJobsResponse, ClaimJobsError>({
    ...options,
    url: '/v2/providers/workers/{workerId}/claims',
  });
};

export const updateClaimStatus = (options: Options<UpdateClaimStatusData>) => {
  return (options?.client ?? client).put<UpdateClaimStatusResponse, UpdateClaimStatusError>({
    ...options,
    url: '/v2/providers/workers/{workerId}/claims/{claimId}/status',
  });
};

/**
 * Create a new configuration.
 */
export const createConfiguration = (options?: Options<CreateConfigurationData>) => {
  return (options?.client ?? client).post<CreateConfigurationResponse, CreateConfigurationError>({
    ...options,
    url: '/v2/providers/configurations',
  });
};

/**
 * Query for existing configurations.
 */
export const queryConfigurations = (options?: Options) => {
  return (options?.client ?? client).get<QueryConfigurationsResponse, QueryConfigurationsError>({
    ...options,
    url: '/v2/providers/configurations',
  });
};

/**
 * Get options for a configuration.
 */
export const getConfiguration = (options: Options<GetConfigurationData>) => {
  return (options?.client ?? client).get<GetConfigurationResponse, GetConfigurationError>({
    ...options,
    url: '/v2/providers/configurations/{configurationId}/options',
  });
};

/**
 * Delete a configuration.
 */
export const deleteConfiguration = (options: Options<DeleteConfigurationData>) => {
  return (options?.client ?? client).delete<DeleteConfigurationResponse, DeleteConfigurationError>({
    ...options,
    url: '/v2/providers/configurations/{configurationId}',
  });
};

/**
 * Age classification
 * Detects minors in media content. Returns a boolean value indicating whether the content contains minors as well as details on where minors are detected.
 */
export const invokeAgeClassificationStepTemplate = (
  options?: Options<InvokeAgeClassificationStepTemplateData>
) => {
  return (options?.client ?? client).post<
    InvokeAgeClassificationStepTemplateResponse,
    InvokeAgeClassificationStepTemplateError
  >({
    ...options,
    url: '/v2/consumer/recipes/ageClassification',
  });
};

/**
 * Comfy workflows
 * Runs a comfy workflow. Currently there are limited nodes available. Contact support for more information.
 */
export const invokeComfyStepTemplate = (options?: Options<InvokeComfyStepTemplateData>) => {
  return (options?.client ?? client).post<
    InvokeComfyStepTemplateResponse,
    InvokeComfyStepTemplateError
  >({
    ...options,
    url: '/v2/consumer/recipes/comfy',
  });
};

/**
 * Echo
 * A workflow step that takes a message string and retuns it.
 * /// This step is intended for testing purposes.
 */
export const invokeEchoStepTemplate = (options?: Options<InvokeEchoStepTemplateData>) => {
  return (options?.client ?? client).post<
    InvokeEchoStepTemplateResponse,
    InvokeEchoStepTemplateError
  >({
    ...options,
    url: '/v2/consumer/recipes/echo',
  });
};

/**
 * LORA Training
 * Train LORA's
 */
export const invokeImageResourceTrainingStepTemplate = (
  options?: Options<InvokeImageResourceTrainingStepTemplateData>
) => {
  return (options?.client ?? client).post<
    InvokeImageResourceTrainingStepTemplateResponse,
    InvokeImageResourceTrainingStepTemplateError
  >({
    ...options,
    url: '/v2/consumer/recipes/imageResourceTraining',
  });
};

/**
 * Image upload
 * Uploads an image to be used in a workflow
 */
export const invokeImageUploadStepTemplate = (
  options?: Options<InvokeImageUploadStepTemplateData>
) => {
  return (options?.client ?? client).post<
    InvokeImageUploadStepTemplateResponse,
    InvokeImageUploadStepTemplateError
  >({
    ...options,
    url: '/v2/consumer/recipes/imageUpload',
  });
};

/**
 * TextToImage
 * Generate images using text as input
 */
export const invokeTextToImageStepTemplate = (
  options?: Options<InvokeTextToImageStepTemplateData>
) => {
  return (options?.client ?? client).post<
    InvokeTextToImageStepTemplateResponse,
    InvokeTextToImageStepTemplateError
  >({
    ...options,
    url: '/v2/consumer/recipes/textToImage',
  });
};

/**
 * Video generation
 * Generate videos through text/image inputs using any of our supported engines
 */
export const invokeVideoGenStepTemplate = (options?: Options<InvokeVideoGenStepTemplateData>) => {
  return (options?.client ?? client).post<
    InvokeVideoGenStepTemplateResponse,
    InvokeVideoGenStepTemplateError
  >({
    ...options,
    url: '/v2/consumer/recipes/videoGen',
  });
};

/**
 * Get an existing resource.
 */
export const getResource = (options: Options<GetResourceData>) => {
  return (options?.client ?? client).get<GetResourceResponse, GetResourceError>({
    ...options,
    url: '/v2/resources/{air}',
  });
};

/**
 * Invalidates the cache of a specific resource.
 */
export const invalidateResource = (options: Options<InvalidateResourceData>) => {
  return (options?.client ?? client).delete<InvalidateResourceResponse, InvalidateResourceError>({
    ...options,
    url: '/v2/resources/{air}',
  });
};

export const getRecommendedResources = (options: Options<GetRecommendedResourcesData>) => {
  return (options?.client ?? client).get<
    GetRecommendedResourcesResponse,
    GetRecommendedResourcesError
  >({
    ...options,
    url: '/v2/providers/workers/{workerId}/resources',
  });
};

export const downloadResource = (options: Options<DownloadResourceData>) => {
  return (options?.client ?? client).get<DownloadResourceResponse, DownloadResourceError>({
    ...options,
    url: '/v2/providers/workers/{workerId}/resources/{air}',
  });
};

/**
 * Create a worker with a given registration.
 */
export const createWorker = (options?: Options<CreateWorkerData>) => {
  return (options?.client ?? client).post<CreateWorkerResponse, CreateWorkerError>({
    ...options,
    url: '/v2/providers/workers',
  });
};

/**
 * Query existing workers.
 */
export const queryWorkers = (options?: Options) => {
  return (options?.client ?? client).get<QueryWorkersResponse, QueryWorkersError>({
    ...options,
    url: '/v2/providers/workers',
  });
};

/**
 * Gets the worker for the provided ID.
 */
export const getWorker = (options: Options<GetWorkerData>) => {
  return (options?.client ?? client).get<GetWorkerResponse, GetWorkerError>({
    ...options,
    url: '/v2/providers/workers/{workerId}',
  });
};

/**
 * Delete a worker.
 */
export const deleteWorker = (options: Options<DeleteWorkerData>) => {
  return (options?.client ?? client).delete<DeleteWorkerResponse, DeleteWorkerError>({
    ...options,
    url: '/v2/providers/workers/{workerId}',
  });
};

/**
 * Gets the registration details for the specified worker.
 */
export const getRegistration = (options: Options<GetRegistrationData>) => {
  return (options?.client ?? client).get<GetRegistrationResponse, GetRegistrationError>({
    ...options,
    url: '/v2/providers/workers/{workerId}/registration',
  });
};

/**
 * Update the registration details of the specified worker.
 */
export const updateWorkerRegistration = (options: Options<UpdateWorkerRegistrationData>) => {
  return (options?.client ?? client).put<
    UpdateWorkerRegistrationResponse,
    UpdateWorkerRegistrationError
  >({
    ...options,
    url: '/v2/providers/workers/{workerId}/registration',
  });
};

/**
 * Patch a worker's registration resources
 */
export const patchWorkerResources = (options: Options<PatchWorkerResourcesData>) => {
  return (options?.client ?? client).patch<PatchWorkerResourcesResponse, PatchWorkerResourcesError>(
    {
      ...options,
      url: '/v2/providers/workers/{workerId}/registration/resources',
    }
  );
};

/**
 * Submit workflow
 */
export const submitWorkflow = (options?: Options<SubmitWorkflowData>) => {
  return (options?.client ?? client).post<SubmitWorkflowResponse, SubmitWorkflowError>({
    ...options,
    url: '/v2/consumer/workflows',
  });
};

/**
 * Query workflows
 */
export const queryWorkflows = (options?: Options<QueryWorkflowsData>) => {
  return (options?.client ?? client).get<QueryWorkflowsResponse, QueryWorkflowsError>({
    ...options,
    url: '/v2/consumer/workflows',
  });
};

/**
 * Get workflow
 */
export const getWorkflow = (options: Options<GetWorkflowData>) => {
  return (options?.client ?? client).get<GetWorkflowResponse, GetWorkflowError>({
    ...options,
    url: '/v2/consumer/workflows/{workflowId}',
  });
};

/**
 * Update workflow
 * Updates a worfklow. This can currently be used to cancel a worfklow or override metadata and/or tags
 */
export const updateWorkflow = (options: Options<UpdateWorkflowData>) => {
  return (options?.client ?? client).put<UpdateWorkflowResponse, UpdateWorkflowError>({
    ...options,
    url: '/v2/consumer/workflows/{workflowId}',
  });
};

/**
 * Patch workflow
 * Patches a worfklow using JSON Patch. This can currently be used to cancel a worfklow, update metadata and add additional tags
 */
export const patchWorkflow = (options: Options<PatchWorkflowData>) => {
  return (options?.client ?? client).patch<PatchWorkflowResponse, PatchWorkflowError>({
    ...options,
    url: '/v2/consumer/workflows/{workflowId}',
  });
};

/**
 * Delete workflow
 * This will delete a workflow. This may trigger a refund if the work requested with this workflow has not yet started
 */
export const deleteWorkflow = (options: Options<DeleteWorkflowData>) => {
  return (options?.client ?? client).delete<DeleteWorkflowResponse, DeleteWorkflowError>({
    ...options,
    url: '/v2/consumer/workflows/{workflowId}',
  });
};

/**
 * Add workflow tag
 * Adds a tag to a workflow
 */
export const addWorkflowTag = (options: Options<AddWorkflowTagData>) => {
  return (options?.client ?? client).post<AddWorkflowTagResponse, AddWorkflowTagError>({
    ...options,
    url: '/v2/consumer/workflows/{workflowId}/tags',
  });
};

/**
 * Delete all workflow tags
 */
export const removeAllWorkflowTags = (options: Options<RemoveAllWorkflowTagsData>) => {
  return (options?.client ?? client).delete<
    RemoveAllWorkflowTagsResponse,
    RemoveAllWorkflowTagsError
  >({
    ...options,
    url: '/v2/consumer/workflows/{workflowId}/tags',
  });
};

/**
 * Delete workflow tag
 */
export const removeWorkflowTag = (options: Options<RemoveWorkflowTagData>) => {
  return (options?.client ?? client).delete<RemoveWorkflowTagResponse, RemoveWorkflowTagError>({
    ...options,
    url: '/v2/consumer/workflows/{workflowId}/tags/{tag}',
  });
};

/**
 * Get the status of a workflow step
 */
export const getWorkflowStep = (options: Options<GetWorkflowStepData>) => {
  return (options?.client ?? client).get<GetWorkflowStepResponse, GetWorkflowStepError>({
    ...options,
    url: '/v2/consumer/workflows/{workflowId}/steps/{stepName}',
  });
};

/**
 * Updates a step within a particular workflow.
 */
export const updateWorkflowStep = (options: Options<UpdateWorkflowStepData>) => {
  return (options?.client ?? client).put<UpdateWorkflowStepResponse, UpdateWorkflowStepError>({
    ...options,
    url: '/v2/consumer/workflows/{workflowId}/steps/{stepName}',
  });
};

export const patchWorkflowStep = (options: Options<PatchWorkflowStepData>) => {
  return (options?.client ?? client).patch<PatchWorkflowStepResponse, PatchWorkflowStepError>({
    ...options,
    url: '/v2/consumer/workflows/{workflowId}/steps/{stepName}',
  });
};
