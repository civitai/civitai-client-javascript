// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type {
  GetBlobData,
  GetBlobErrors,
  HeadBlobData,
  HeadBlobResponses,
  HeadBlobErrors,
  InvokeAgeClassificationStepTemplateData,
  InvokeAgeClassificationStepTemplateResponses,
  InvokeAgeClassificationStepTemplateErrors,
  InvokeComfyStepTemplateData,
  InvokeComfyStepTemplateResponses,
  InvokeComfyStepTemplateErrors,
  InvokeEchoStepTemplateData,
  InvokeEchoStepTemplateResponses,
  InvokeEchoStepTemplateErrors,
  InvokeImageGenStepTemplateData,
  InvokeImageGenStepTemplateResponses,
  InvokeImageGenStepTemplateErrors,
  InvokeImageResourceTrainingStepTemplateData,
  InvokeImageResourceTrainingStepTemplateResponses,
  InvokeImageResourceTrainingStepTemplateErrors,
  InvokeImageUploadStepTemplateData,
  InvokeImageUploadStepTemplateResponses,
  InvokeImageUploadStepTemplateErrors,
  InvokeTextToImageStepTemplateData,
  InvokeTextToImageStepTemplateResponses,
  InvokeTextToImageStepTemplateErrors,
  InvokeVideoEnhancementStepTemplateData,
  InvokeVideoEnhancementStepTemplateResponses,
  InvokeVideoEnhancementStepTemplateErrors,
  InvokeVideoGenStepTemplateData,
  InvokeVideoGenStepTemplateResponses,
  InvokeVideoGenStepTemplateErrors,
  InvalidateResourceData,
  InvalidateResourceResponses,
  InvalidateResourceErrors,
  GetResourceData,
  GetResourceResponses,
  GetResourceErrors,
  QueryWorkflowsData,
  QueryWorkflowsResponses,
  QueryWorkflowsErrors,
  SubmitWorkflowData,
  SubmitWorkflowResponses,
  SubmitWorkflowErrors,
  DeleteWorkflowData,
  DeleteWorkflowResponses,
  DeleteWorkflowErrors,
  GetWorkflowData,
  GetWorkflowResponses,
  GetWorkflowErrors,
  PatchWorkflowData,
  PatchWorkflowResponses,
  PatchWorkflowErrors,
  UpdateWorkflowData,
  UpdateWorkflowResponses,
  UpdateWorkflowErrors,
  RemoveAllWorkflowTagsData,
  RemoveAllWorkflowTagsResponses,
  RemoveAllWorkflowTagsErrors,
  AddWorkflowTagData,
  AddWorkflowTagResponses,
  AddWorkflowTagErrors,
  RemoveWorkflowTagData,
  RemoveWorkflowTagResponses,
  RemoveWorkflowTagErrors,
  GetWorkflowStepData,
  GetWorkflowStepResponses,
  GetWorkflowStepErrors,
  PatchWorkflowStepData,
  PatchWorkflowStepResponses,
  PatchWorkflowStepErrors,
  UpdateWorkflowStepData,
  UpdateWorkflowStepResponses,
  UpdateWorkflowStepErrors,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get blob by ID. This will return the blob as a binary stream.
 */
export const getBlob = <ThrowOnError extends boolean = false>(
  options: Options<GetBlobData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<unknown, GetBlobErrors, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/blobs/{blobId}',
    ...options,
  });
};

/**
 * Handles HTTP HEAD requests for a specific blob, checking its existence and NSFW level.
 */
export const headBlob = <ThrowOnError extends boolean = false>(
  options: Options<HeadBlobData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).head<HeadBlobResponses, HeadBlobErrors, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/blobs/{blobId}',
    ...options,
  });
};

/**
 * Age classification
 * Detects minors in media content. Returns a boolean value indicating whether the content contains minors as well as details on where minors are detected.
 */
export const invokeAgeClassificationStepTemplate = <ThrowOnError extends boolean = false>(
  options?: Options<InvokeAgeClassificationStepTemplateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    InvokeAgeClassificationStepTemplateResponses,
    InvokeAgeClassificationStepTemplateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/recipes/ageClassification',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Comfy workflows
 * Runs a comfy workflow. Currently there are limited nodes available. Contact support for more information.
 */
export const invokeComfyStepTemplate = <ThrowOnError extends boolean = false>(
  options?: Options<InvokeComfyStepTemplateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    InvokeComfyStepTemplateResponses,
    InvokeComfyStepTemplateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/recipes/comfy',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Echo
 * A workflow step that takes a message string and retuns it.
 * /// This step is intended for testing purposes.
 */
export const invokeEchoStepTemplate = <ThrowOnError extends boolean = false>(
  options?: Options<InvokeEchoStepTemplateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    InvokeEchoStepTemplateResponses,
    InvokeEchoStepTemplateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/recipes/echo',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Image Generation
 * Generate images through text/image inputs using any of our supported engines
 */
export const invokeImageGenStepTemplate = <ThrowOnError extends boolean = false>(
  options?: Options<InvokeImageGenStepTemplateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    InvokeImageGenStepTemplateResponses,
    InvokeImageGenStepTemplateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/recipes/imageGen',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * LORA Training
 * Train LORA's
 */
export const invokeImageResourceTrainingStepTemplate = <ThrowOnError extends boolean = false>(
  options?: Options<InvokeImageResourceTrainingStepTemplateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    InvokeImageResourceTrainingStepTemplateResponses,
    InvokeImageResourceTrainingStepTemplateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/recipes/imageResourceTraining',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Image upload
 * Uploads an image to be used in a workflow
 */
export const invokeImageUploadStepTemplate = <ThrowOnError extends boolean = false>(
  options?: Options<InvokeImageUploadStepTemplateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    InvokeImageUploadStepTemplateResponses,
    InvokeImageUploadStepTemplateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/recipes/imageUpload',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * TextToImage
 * Generate images using text as input
 */
export const invokeTextToImageStepTemplate = <ThrowOnError extends boolean = false>(
  options?: Options<InvokeTextToImageStepTemplateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    InvokeTextToImageStepTemplateResponses,
    InvokeTextToImageStepTemplateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/recipes/textToImage',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Upscale videos and/or interpolate frames
 */
export const invokeVideoEnhancementStepTemplate = <ThrowOnError extends boolean = false>(
  options?: Options<InvokeVideoEnhancementStepTemplateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    InvokeVideoEnhancementStepTemplateResponses,
    InvokeVideoEnhancementStepTemplateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/recipes/videoEnhancement',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Video generation
 * Generate videos through text/image inputs using any of our supported engines
 */
export const invokeVideoGenStepTemplate = <ThrowOnError extends boolean = false>(
  options?: Options<InvokeVideoGenStepTemplateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    InvokeVideoGenStepTemplateResponses,
    InvokeVideoGenStepTemplateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/recipes/videoGen',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Invalidates the cache of a specific resource.
 */
export const invalidateResource = <ThrowOnError extends boolean = false>(
  options: Options<InvalidateResourceData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    InvalidateResourceResponses,
    InvalidateResourceErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/resources/{air}',
    ...options,
  });
};

/**
 * Get an existing resource.
 */
export const getResource = <ThrowOnError extends boolean = false>(
  options: Options<GetResourceData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetResourceResponses,
    GetResourceErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/resources/{air}',
    ...options,
  });
};

/**
 * Query workflows
 */
export const queryWorkflows = <ThrowOnError extends boolean = false>(
  options?: Options<QueryWorkflowsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    QueryWorkflowsResponses,
    QueryWorkflowsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/workflows',
    ...options,
  });
};

/**
 * Submit workflow
 */
export const submitWorkflow = <ThrowOnError extends boolean = false>(
  options?: Options<SubmitWorkflowData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    SubmitWorkflowResponses,
    SubmitWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/workflows',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete workflow
 * This will delete a workflow. This may trigger a refund if the work requested with this workflow has not yet started
 */
export const deleteWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<DeleteWorkflowData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteWorkflowResponses,
    DeleteWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/workflows/{workflowId}',
    ...options,
  });
};

/**
 * Get workflow
 */
export const getWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkflowData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetWorkflowResponses,
    GetWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/workflows/{workflowId}',
    ...options,
  });
};

/**
 * Patch workflow
 * Patches a worfklow using JSON Patch. This can currently be used to cancel a worfklow, update metadata and add additional tags
 */
export const patchWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<PatchWorkflowData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchWorkflowResponses,
    PatchWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/workflows/{workflowId}',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options.headers,
    },
  });
};

/**
 * Update workflow
 * Updates a worfklow. This can currently be used to cancel a worfklow or override metadata and/or tags
 */
export const updateWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<UpdateWorkflowData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateWorkflowResponses,
    UpdateWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/workflows/{workflowId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete all workflow tags
 */
export const removeAllWorkflowTags = <ThrowOnError extends boolean = false>(
  options: Options<RemoveAllWorkflowTagsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveAllWorkflowTagsResponses,
    RemoveAllWorkflowTagsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/workflows/{workflowId}/tags',
    ...options,
  });
};

/**
 * Add workflow tag
 * Adds a tag to a workflow
 */
export const addWorkflowTag = <ThrowOnError extends boolean = false>(
  options: Options<AddWorkflowTagData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddWorkflowTagResponses,
    AddWorkflowTagErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/workflows/{workflowId}/tags',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete workflow tag
 */
export const removeWorkflowTag = <ThrowOnError extends boolean = false>(
  options: Options<RemoveWorkflowTagData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveWorkflowTagResponses,
    RemoveWorkflowTagErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/workflows/{workflowId}/tags/{tag}',
    ...options,
  });
};

/**
 * Get the status of a workflow step
 */
export const getWorkflowStep = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkflowStepData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetWorkflowStepResponses,
    GetWorkflowStepErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/workflows/{workflowId}/steps/{stepName}',
    ...options,
  });
};

export const patchWorkflowStep = <ThrowOnError extends boolean = false>(
  options: Options<PatchWorkflowStepData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchWorkflowStepResponses,
    PatchWorkflowStepErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/workflows/{workflowId}/steps/{stepName}',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options.headers,
    },
  });
};

/**
 * Updates a step within a particular workflow.
 */
export const updateWorkflowStep = <ThrowOnError extends boolean = false>(
  options: Options<UpdateWorkflowStepData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateWorkflowStepResponses,
    UpdateWorkflowStepErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/consumer/workflows/{workflowId}/steps/{stepName}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};
